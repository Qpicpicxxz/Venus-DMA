/* tetramax_memcomp Version: 4.0.5-EAC4 */
/* common_memcomp Version: 4.0.5-beta20 */
/* lang compiler Version: 4.1.6-beta1 Jul 19 2012 13:55:19 */
//
//       CONFIDENTIAL AND PROPRIETARY SOFTWARE OF ARM PHYSICAL IP, INC.
//      
//       Copyright (c) 1993 - 2024 ARM Physical IP, Inc.  All Rights Reserved.
//      
//       Use of this Software is subject to the terms and conditions of the
//       applicable license agreement with ARM Physical IP, Inc.
//       In addition, this Software is protected by patents, copyright law 
//       and international treaties.
//      
//       The copyright notice(s) in this Software does not indicate actual or
//       intended publication of this Software.
//
//      Tetramax model for Synchronous Dual-Port Ram
//
//       Instance Name:              SRAMdpw64d256
//       Words:                      256
//       Bits:                       64
//       Mux:                        4
//       Drive:                      6
//       Write Mask:                 Off
//       Write Thru:                 Off
//       Extra Margin Adjustment:    On
//       Redundant Columns:          0
//       Test Muxes                  On
//       Power Gating:               Off
//       Retention:                  On
//       Pipeline:                   Off
//       Read Disturb Test:	        Off
//       
//       Creation Date:  Tue Jan 16 16:38:39 2024
//       Version: 	r1p1
//
//      Verified
//
//      Modeling Assumptions:
//      This model is for use by only TetraMax ATPG tool.
//      It is not intended to be used by any Verilog Simulator.
//
//      Modeling Limitations: These models have limited functionality as
//      defined by the TetraMax modelling guidelines. These models are
//      developed on Verilog syntax but they don't fully represent the
//      functionality of the memory model as they are restricted by
//      the ATPG tool. We have used fast sequential ATPG engine for verification
//      of all the memories on recommendation from Synopsys Tetramax expert. 
//      The models have been tested by generating the ATPG vectors and simulating them
//      as well as running functional vectors through tetramax logical simulation engine.
//
//      Known Bugs: None.
//
//      Known Work Arounds: N/A
//


`timescale 1ns/1ps
`define read_write readx
`define write_write xword
`define read_read   normal
`celldefine
module SRAMdpw64d256_scanflop (Q, SI, D, SE, CLK, Xout);
   output Q;
   input SI, D, SE, CLK, Xout;
   _MUX m1 (SE, D, SI, n1);
   _MUX m2 (Xout, n1, 1'bX, n2);
   _DFF r1 (1'b0, 1'b0, CLK, n2, Q);
endmodule
`endcelldefine
`celldefine
module SRAMdpw64d256_bitcell (CLKA, CLKB, WRITEA, WRITEB, AA, AB, DA, DB, XoutA, XoutB, QA, QB);
   input CLKA, WRITEA, DA, XoutA;
   input CLKB, WRITEB, DB, XoutB;
   input [7:0] AA, AB;
   output QA, QB;
 
   reg QA, QB;
   reg mem [255:0];
   wire WRITEA_ram, DA_ram;
   wire WRITEB_ram, DB_ram;
   wire [7:0] AA_ram, AB_ram;
 
   _MUX WRITEA_MUX (XoutA, WRITEA, 1'bX, WRITEA_ram);
   _MUX DA_mux (XoutA, DA, 1'bX, DA_ram);
   _MUX AA0_mux (XoutA, AA[0], 1'bX, AA_ram[0]);
   _MUX AA1_mux (XoutA, AA[1], 1'bX, AA_ram[1]);
   _MUX AA2_mux (XoutA, AA[2], 1'bX, AA_ram[2]);
   _MUX AA3_mux (XoutA, AA[3], 1'bX, AA_ram[3]);
   _MUX AA4_mux (XoutA, AA[4], 1'bX, AA_ram[4]);
   _MUX AA5_mux (XoutA, AA[5], 1'bX, AA_ram[5]);
   _MUX AA6_mux (XoutA, AA[6], 1'bX, AA_ram[6]);
   _MUX AA7_mux (XoutA, AA[7], 1'bX, AA_ram[7]);
   _MUX WRITEB_MUX (XoutB, WRITEB, 1'bX, WRITEB_ram);
   _MUX DB_mux (XoutB, DB, 1'bX, DB_ram);
   _MUX AB0_mux (XoutB, AB[0], 1'bX, AB_ram[0]);
   _MUX AB1_mux (XoutB, AB[1], 1'bX, AB_ram[1]);
   _MUX AB2_mux (XoutB, AB[2], 1'bX, AB_ram[2]);
   _MUX AB3_mux (XoutB, AB[3], 1'bX, AB_ram[3]);
   _MUX AB4_mux (XoutB, AB[4], 1'bX, AB_ram[4]);
   _MUX AB5_mux (XoutB, AB[5], 1'bX, AB_ram[5]);
   _MUX AB6_mux (XoutB, AB[6], 1'bX, AB_ram[6]);
   _MUX AB7_mux (XoutB, AB[7], 1'bX, AB_ram[7]);
 
   event WRITE_OP;
   always @ (posedge CLKA) if(WRITEA_ram) begin
      mem[AA_ram]=DA_ram;
      #0; -> WRITE_OP;
   end
 
   always @ (posedge CLKB) if(WRITEB_ram) begin
      mem[AB_ram]=DB_ram;
      #0; -> WRITE_OP;
   end
 
   wire TIE1;
   assign TIE1 = 1'b1;
   always @ (TIE1 or AA or WRITE_OP) if(TIE1) QA=mem[AA];
   always @ (TIE1 or AB or WRITE_OP) if(TIE1) QB=mem[AB];
endmodule
`endcelldefine
`suppress_faults
`enable_portfaults
`ifdef POWER_PINS
module SRAMdpw64d256 (VDDCE, VDDPE, VSSE, CENYA, WENYA, AYA, CENYB, WENYB, AYB, QA,
    QB, SOA, SOB, CLKA, CENA, WENA, AA, DA, CLKB, CENB, WENB, AB, DB, EMAA, EMAWA,
    EMAB, EMAWB, TENA, TCENA, TWENA, TAA, TDA, TENB, TCENB, TWENB, TAB, TDB, RET1N,
    SIA, SEA, DFTRAMBYP, SIB, SEB, COLLDISN);
`else
module SRAMdpw64d256 (CENYA, WENYA, AYA, CENYB, WENYB, AYB, QA, QB, SOA, SOB, CLKA,
    CENA, WENA, AA, DA, CLKB, CENB, WENB, AB, DB, EMAA, EMAWA, EMAB, EMAWB, TENA, TCENA,
    TWENA, TAA, TDA, TENB, TCENB, TWENB, TAB, TDB, RET1N, SIA, SEA, DFTRAMBYP, SIB,
    SEB, COLLDISN);
`endif

  output  CENYA;
  output  WENYA;
  output [7:0] AYA;
  output  CENYB;
  output  WENYB;
  output [7:0] AYB;
  output [63:0] QA;
  output [63:0] QB;
  output [1:0] SOA;
  output [1:0] SOB;
  input  CLKA;
  input  CENA;
  input  WENA;
  input [7:0] AA;
  input [63:0] DA;
  input  CLKB;
  input  CENB;
  input  WENB;
  input [7:0] AB;
  input [63:0] DB;
  input [2:0] EMAA;
  input [1:0] EMAWA;
  input [2:0] EMAB;
  input [1:0] EMAWB;
  input  TENA;
  input  TCENA;
  input  TWENA;
  input [7:0] TAA;
  input [63:0] TDA;
  input  TENB;
  input  TCENB;
  input  TWENB;
  input [7:0] TAB;
  input [63:0] TDB;
  input  RET1N;
  input [1:0] SIA;
  input  SEA;
  input  DFTRAMBYP;
  input [1:0] SIB;
  input  SEB;
  input  COLLDISN;
`ifdef POWER_PINS
  inout VDDCE;
  inout VDDPE;
  inout VSSE;
`endif
   wire [1:0] BUS_SIA;
   assign BUS_SIA[0] = SIA[0];
   assign BUS_SIA[1] = SIA[1];
   wire [7:0] BUS_AA;
   assign BUS_AA = AA;
   wire [63:0] BUS_DA;
  assign BUS_DA = DA;
   wire [63:0] DA_scan;
   wire BUS_WENA;
  assign BUS_WENA = WENA;
   wire [7:0] BMUX_AA;
   wire [7:0] BMUXSEL_AA;
   wire [63:0] BMUX_DA;
   wire BMUX_CENA;
   wire BMUXSEL_CENA;
   wire BMUX_WENA;
   wire BMUXSEL_WENA;
   wire [63:0] INT_QA;
   wire [63:0] READ_QA;
  _MUX maA0 (TENA, TAA[0], BUS_AA[0], BMUX_AA[0]);
  _MUX maselA0 (DFTRAMBYP, 1'b0, BMUX_AA[0], BMUXSEL_AA[0]);
  buf bufmaA0(AYA[0],BMUXSEL_AA[0]);
  _MUX maA1 (TENA, TAA[1], BUS_AA[1], BMUX_AA[1]);
  _MUX maselA1 (DFTRAMBYP, 1'b0, BMUX_AA[1], BMUXSEL_AA[1]);
  buf bufmaA1(AYA[1],BMUXSEL_AA[1]);
  _MUX maA2 (TENA, TAA[2], BUS_AA[2], BMUX_AA[2]);
  _MUX maselA2 (DFTRAMBYP, 1'b0, BMUX_AA[2], BMUXSEL_AA[2]);
  buf bufmaA2(AYA[2],BMUXSEL_AA[2]);
  _MUX maA3 (TENA, TAA[3], BUS_AA[3], BMUX_AA[3]);
  _MUX maselA3 (DFTRAMBYP, 1'b0, BMUX_AA[3], BMUXSEL_AA[3]);
  buf bufmaA3(AYA[3],BMUXSEL_AA[3]);
  _MUX maA4 (TENA, TAA[4], BUS_AA[4], BMUX_AA[4]);
  _MUX maselA4 (DFTRAMBYP, 1'b0, BMUX_AA[4], BMUXSEL_AA[4]);
  buf bufmaA4(AYA[4],BMUXSEL_AA[4]);
  _MUX maA5 (TENA, TAA[5], BUS_AA[5], BMUX_AA[5]);
  _MUX maselA5 (DFTRAMBYP, 1'b0, BMUX_AA[5], BMUXSEL_AA[5]);
  buf bufmaA5(AYA[5],BMUXSEL_AA[5]);
  _MUX maA6 (TENA, TAA[6], BUS_AA[6], BMUX_AA[6]);
  _MUX maselA6 (DFTRAMBYP, 1'b0, BMUX_AA[6], BMUXSEL_AA[6]);
  buf bufmaA6(AYA[6],BMUXSEL_AA[6]);
  _MUX maA7 (TENA, TAA[7], BUS_AA[7], BMUX_AA[7]);
  _MUX maselA7 (DFTRAMBYP, 1'b0, BMUX_AA[7], BMUXSEL_AA[7]);
  buf bufmaA7(AYA[7],BMUXSEL_AA[7]);

  _MUX mdA0 (TENA, TDA[0], BUS_DA[0], BMUX_DA[0]);
  _MUX mdA1 (TENA, TDA[1], BUS_DA[1], BMUX_DA[1]);
  _MUX mdA2 (TENA, TDA[2], BUS_DA[2], BMUX_DA[2]);
  _MUX mdA3 (TENA, TDA[3], BUS_DA[3], BMUX_DA[3]);
  _MUX mdA4 (TENA, TDA[4], BUS_DA[4], BMUX_DA[4]);
  _MUX mdA5 (TENA, TDA[5], BUS_DA[5], BMUX_DA[5]);
  _MUX mdA6 (TENA, TDA[6], BUS_DA[6], BMUX_DA[6]);
  _MUX mdA7 (TENA, TDA[7], BUS_DA[7], BMUX_DA[7]);
  _MUX mdA8 (TENA, TDA[8], BUS_DA[8], BMUX_DA[8]);
  _MUX mdA9 (TENA, TDA[9], BUS_DA[9], BMUX_DA[9]);
  _MUX mdA10 (TENA, TDA[10], BUS_DA[10], BMUX_DA[10]);
  _MUX mdA11 (TENA, TDA[11], BUS_DA[11], BMUX_DA[11]);
  _MUX mdA12 (TENA, TDA[12], BUS_DA[12], BMUX_DA[12]);
  _MUX mdA13 (TENA, TDA[13], BUS_DA[13], BMUX_DA[13]);
  _MUX mdA14 (TENA, TDA[14], BUS_DA[14], BMUX_DA[14]);
  _MUX mdA15 (TENA, TDA[15], BUS_DA[15], BMUX_DA[15]);
  _MUX mdA16 (TENA, TDA[16], BUS_DA[16], BMUX_DA[16]);
  _MUX mdA17 (TENA, TDA[17], BUS_DA[17], BMUX_DA[17]);
  _MUX mdA18 (TENA, TDA[18], BUS_DA[18], BMUX_DA[18]);
  _MUX mdA19 (TENA, TDA[19], BUS_DA[19], BMUX_DA[19]);
  _MUX mdA20 (TENA, TDA[20], BUS_DA[20], BMUX_DA[20]);
  _MUX mdA21 (TENA, TDA[21], BUS_DA[21], BMUX_DA[21]);
  _MUX mdA22 (TENA, TDA[22], BUS_DA[22], BMUX_DA[22]);
  _MUX mdA23 (TENA, TDA[23], BUS_DA[23], BMUX_DA[23]);
  _MUX mdA24 (TENA, TDA[24], BUS_DA[24], BMUX_DA[24]);
  _MUX mdA25 (TENA, TDA[25], BUS_DA[25], BMUX_DA[25]);
  _MUX mdA26 (TENA, TDA[26], BUS_DA[26], BMUX_DA[26]);
  _MUX mdA27 (TENA, TDA[27], BUS_DA[27], BMUX_DA[27]);
  _MUX mdA28 (TENA, TDA[28], BUS_DA[28], BMUX_DA[28]);
  _MUX mdA29 (TENA, TDA[29], BUS_DA[29], BMUX_DA[29]);
  _MUX mdA30 (TENA, TDA[30], BUS_DA[30], BMUX_DA[30]);
  _MUX mdA31 (TENA, TDA[31], BUS_DA[31], BMUX_DA[31]);
  _MUX mdA32 (TENA, TDA[32], BUS_DA[32], BMUX_DA[32]);
  _MUX mdA33 (TENA, TDA[33], BUS_DA[33], BMUX_DA[33]);
  _MUX mdA34 (TENA, TDA[34], BUS_DA[34], BMUX_DA[34]);
  _MUX mdA35 (TENA, TDA[35], BUS_DA[35], BMUX_DA[35]);
  _MUX mdA36 (TENA, TDA[36], BUS_DA[36], BMUX_DA[36]);
  _MUX mdA37 (TENA, TDA[37], BUS_DA[37], BMUX_DA[37]);
  _MUX mdA38 (TENA, TDA[38], BUS_DA[38], BMUX_DA[38]);
  _MUX mdA39 (TENA, TDA[39], BUS_DA[39], BMUX_DA[39]);
  _MUX mdA40 (TENA, TDA[40], BUS_DA[40], BMUX_DA[40]);
  _MUX mdA41 (TENA, TDA[41], BUS_DA[41], BMUX_DA[41]);
  _MUX mdA42 (TENA, TDA[42], BUS_DA[42], BMUX_DA[42]);
  _MUX mdA43 (TENA, TDA[43], BUS_DA[43], BMUX_DA[43]);
  _MUX mdA44 (TENA, TDA[44], BUS_DA[44], BMUX_DA[44]);
  _MUX mdA45 (TENA, TDA[45], BUS_DA[45], BMUX_DA[45]);
  _MUX mdA46 (TENA, TDA[46], BUS_DA[46], BMUX_DA[46]);
  _MUX mdA47 (TENA, TDA[47], BUS_DA[47], BMUX_DA[47]);
  _MUX mdA48 (TENA, TDA[48], BUS_DA[48], BMUX_DA[48]);
  _MUX mdA49 (TENA, TDA[49], BUS_DA[49], BMUX_DA[49]);
  _MUX mdA50 (TENA, TDA[50], BUS_DA[50], BMUX_DA[50]);
  _MUX mdA51 (TENA, TDA[51], BUS_DA[51], BMUX_DA[51]);
  _MUX mdA52 (TENA, TDA[52], BUS_DA[52], BMUX_DA[52]);
  _MUX mdA53 (TENA, TDA[53], BUS_DA[53], BMUX_DA[53]);
  _MUX mdA54 (TENA, TDA[54], BUS_DA[54], BMUX_DA[54]);
  _MUX mdA55 (TENA, TDA[55], BUS_DA[55], BMUX_DA[55]);
  _MUX mdA56 (TENA, TDA[56], BUS_DA[56], BMUX_DA[56]);
  _MUX mdA57 (TENA, TDA[57], BUS_DA[57], BMUX_DA[57]);
  _MUX mdA58 (TENA, TDA[58], BUS_DA[58], BMUX_DA[58]);
  _MUX mdA59 (TENA, TDA[59], BUS_DA[59], BMUX_DA[59]);
  _MUX mdA60 (TENA, TDA[60], BUS_DA[60], BMUX_DA[60]);
  _MUX mdA61 (TENA, TDA[61], BUS_DA[61], BMUX_DA[61]);
  _MUX mdA62 (TENA, TDA[62], BUS_DA[62], BMUX_DA[62]);
  _MUX mdA63 (TENA, TDA[63], BUS_DA[63], BMUX_DA[63]);

  _MUX mwenA (TENA, TWENA, BUS_WENA, BMUX_WENA);
  _MUX mwenselA (DFTRAMBYP, 1'b0, BMUX_WENA, BMUXSEL_WENA);
  buf bufmwenA (WENYA, BMUXSEL_WENA);

  _MUX mcenA    (TENA, TCENA, CENA, BMUX_CENA); 
  _MUX mcenselA    (DFTRAMBYP, 1'b0,BMUX_CENA, BMUXSEL_CENA); 
  buf bufmcenA (CENYA, BMUXSEL_CENA);
   wire [7:0] A_max, A_max_n, AA_m;
   wire XoutAif, XoutAiff;
   wire [7:1] BMUX_AA_n, EQ_A, m_AA;
   wire [6:0] XoutAi;
  not BMUX_AA1_n (BMUX_AA_n[1], BMUX_AA[1]);
  not BMUX_AA2_n (BMUX_AA_n[2], BMUX_AA[2]);
  not BMUX_AA3_n (BMUX_AA_n[3], BMUX_AA[3]);
  not BMUX_AA4_n (BMUX_AA_n[4], BMUX_AA[4]);
  not BMUX_AA5_n (BMUX_AA_n[5], BMUX_AA[5]);
  not BMUX_AA6_n (BMUX_AA_n[6], BMUX_AA[6]);
  not BMUX_AA7_n (BMUX_AA_n[7], BMUX_AA[7]);

  assign A_max[0] = 1;
  assign A_max[1] = 1;
  assign A_max[2] = 1;
  assign A_max[3] = 1;
  assign A_max[4] = 1;
  assign A_max[5] = 1;
  assign A_max[6] = 1;
  assign A_max[7] = 1;

  not Amax0_n (A_max_n[0], A_max[0]);
  not Amax1_n (A_max_n[1], A_max[1]);
  not Amax2_n (A_max_n[2], A_max[2]);
  not Amax3_n (A_max_n[3], A_max[3]);
  not Amax4_n (A_max_n[4], A_max[4]);
  not Amax5_n (A_max_n[5], A_max[5]);
  not Amax6_n (A_max_n[6], A_max[6]);
  not Amax7_n (A_max_n[7], A_max[7]);

  and andBMUXAAAmax0 (AA_m[0], BMUX_AA[0], A_max_n[0]);
  and andBMUXAAAmax1 (AA_m[1], BMUX_AA[1], A_max_n[1]);
  and andBMUXAAAmax2 (AA_m[2], BMUX_AA[2], A_max_n[2]);
  and andBMUXAAAmax3 (AA_m[3], BMUX_AA[3], A_max_n[3]);
  and andBMUXAAAmax4 (AA_m[4], BMUX_AA[4], A_max_n[4]);
  and andBMUXAAAmax5 (AA_m[5], BMUX_AA[5], A_max_n[5]);
  and andBMUXAAAmax6 (AA_m[6], BMUX_AA[6], A_max_n[6]);
  and andBMUXAAAmax7 (AA_m[7], BMUX_AA[7], A_max_n[7]);

  and andBMUXAAAmax1_n (m_AA[1], BMUX_AA_n[1], A_max[1]);
  and andBMUXAAAmax2_n (m_AA[2], BMUX_AA_n[2], A_max[2]);
  and andBMUXAAAmax3_n (m_AA[3], BMUX_AA_n[3], A_max[3]);
  and andBMUXAAAmax4_n (m_AA[4], BMUX_AA_n[4], A_max[4]);
  and andBMUXAAAmax5_n (m_AA[5], BMUX_AA_n[5], A_max[5]);
  and andBMUXAAAmax6_n (m_AA[6], BMUX_AA_n[6], A_max[6]);
  and andBMUXAAAmax7_n (m_AA[7], BMUX_AA_n[7], A_max[7]);

  nor norAAAmax1 (EQ_A[1], m_AA[1], AA_m[1]);
  nor norAAAmax2 (EQ_A[2], m_AA[2], AA_m[2]);
  nor norAAAmax3 (EQ_A[3], m_AA[3], AA_m[3]);
  nor norAAAmax4 (EQ_A[4], m_AA[4], AA_m[4]);
  nor norAAAmax5 (EQ_A[5], m_AA[5], AA_m[5]);
  nor norAAAmax6 (EQ_A[6], m_AA[6], AA_m[6]);
  nor norAAAmax7 (EQ_A[7], m_AA[7], AA_m[7]);

  and XfAAAmax0 (XoutAi[0], AA_m[0], EQ_A[7], EQ_A[6], EQ_A[5], EQ_A[4], EQ_A[3], EQ_A[2], EQ_A[1]);
  and XfAAAmax1 (XoutAi[1], AA_m[1], EQ_A[7], EQ_A[6], EQ_A[5], EQ_A[4], EQ_A[3], EQ_A[2]);
  and XfAAAmax2 (XoutAi[2], AA_m[2], EQ_A[7], EQ_A[6], EQ_A[5], EQ_A[4], EQ_A[3]);
  and XfAAAmax3 (XoutAi[3], AA_m[3], EQ_A[7], EQ_A[6], EQ_A[5], EQ_A[4]);
  and XfAAAmax4 (XoutAi[4], AA_m[4], EQ_A[7], EQ_A[6], EQ_A[5]);
  and XfAAAmax5 (XoutAi[5], AA_m[5], EQ_A[7], EQ_A[6]);
  and XfAAAmax6 (XoutAi[6], AA_m[6], EQ_A[7]);
  or orXfAAAmax7 (XoutAif, AA_m[7], XoutAi[0], XoutAi[1], XoutAi[2], XoutAi[3], XoutAi[4], XoutAi[5], XoutAi[6]);

  wire [7:0] xDetectionAddrBusA;
   xor addrHandleA0 (xDetectionAddrBusA[0], BMUX_AA[0], BMUX_AA[0]);
   xor addrHandleA1 (xDetectionAddrBusA[1], BMUX_AA[1], BMUX_AA[1]);
   xor addrHandleA2 (xDetectionAddrBusA[2], BMUX_AA[2], BMUX_AA[2]);
   xor addrHandleA3 (xDetectionAddrBusA[3], BMUX_AA[3], BMUX_AA[3]);
   xor addrHandleA4 (xDetectionAddrBusA[4], BMUX_AA[4], BMUX_AA[4]);
   xor addrHandleA5 (xDetectionAddrBusA[5], BMUX_AA[5], BMUX_AA[5]);
   xor addrHandleA6 (xDetectionAddrBusA[6], BMUX_AA[6], BMUX_AA[6]);
   xor addrHandleA7 (xDetectionAddrBusA[7], BMUX_AA[7], BMUX_AA[7]);
   or addrFinalA (xAddrA,xDetectionAddrBusA[0],xDetectionAddrBusA[1],xDetectionAddrBusA[2],xDetectionAddrBusA[3],xDetectionAddrBusA[4],xDetectionAddrBusA[5],xDetectionAddrBusA[6],xDetectionAddrBusA[7]);
   or xBoundA (XoutAFinal, XoutAif, xAddrA);
  nor scanshiftA (nscanshiftA, DFTRAMBYP, SEA);
  and XoutaddrA (XoutaddrA, nscanshiftA, XoutAFinal);
  or XoutAFF0 (XoutAiff, XoutaddrA, XoutA);

  wire [63:0] SPLIT_WENA;
   assign SPLIT_WENA[0] =BMUX_WENA;
   assign SPLIT_WENA[1] =BMUX_WENA;
   assign SPLIT_WENA[2] =BMUX_WENA;
   assign SPLIT_WENA[3] =BMUX_WENA;
   assign SPLIT_WENA[4] =BMUX_WENA;
   assign SPLIT_WENA[5] =BMUX_WENA;
   assign SPLIT_WENA[6] =BMUX_WENA;
   assign SPLIT_WENA[7] =BMUX_WENA;
   assign SPLIT_WENA[8] =BMUX_WENA;
   assign SPLIT_WENA[9] =BMUX_WENA;
   assign SPLIT_WENA[10] =BMUX_WENA;
   assign SPLIT_WENA[11] =BMUX_WENA;
   assign SPLIT_WENA[12] =BMUX_WENA;
   assign SPLIT_WENA[13] =BMUX_WENA;
   assign SPLIT_WENA[14] =BMUX_WENA;
   assign SPLIT_WENA[15] =BMUX_WENA;
   assign SPLIT_WENA[16] =BMUX_WENA;
   assign SPLIT_WENA[17] =BMUX_WENA;
   assign SPLIT_WENA[18] =BMUX_WENA;
   assign SPLIT_WENA[19] =BMUX_WENA;
   assign SPLIT_WENA[20] =BMUX_WENA;
   assign SPLIT_WENA[21] =BMUX_WENA;
   assign SPLIT_WENA[22] =BMUX_WENA;
   assign SPLIT_WENA[23] =BMUX_WENA;
   assign SPLIT_WENA[24] =BMUX_WENA;
   assign SPLIT_WENA[25] =BMUX_WENA;
   assign SPLIT_WENA[26] =BMUX_WENA;
   assign SPLIT_WENA[27] =BMUX_WENA;
   assign SPLIT_WENA[28] =BMUX_WENA;
   assign SPLIT_WENA[29] =BMUX_WENA;
   assign SPLIT_WENA[30] =BMUX_WENA;
   assign SPLIT_WENA[31] =BMUX_WENA;
   assign SPLIT_WENA[32] =BMUX_WENA;
   assign SPLIT_WENA[33] =BMUX_WENA;
   assign SPLIT_WENA[34] =BMUX_WENA;
   assign SPLIT_WENA[35] =BMUX_WENA;
   assign SPLIT_WENA[36] =BMUX_WENA;
   assign SPLIT_WENA[37] =BMUX_WENA;
   assign SPLIT_WENA[38] =BMUX_WENA;
   assign SPLIT_WENA[39] =BMUX_WENA;
   assign SPLIT_WENA[40] =BMUX_WENA;
   assign SPLIT_WENA[41] =BMUX_WENA;
   assign SPLIT_WENA[42] =BMUX_WENA;
   assign SPLIT_WENA[43] =BMUX_WENA;
   assign SPLIT_WENA[44] =BMUX_WENA;
   assign SPLIT_WENA[45] =BMUX_WENA;
   assign SPLIT_WENA[46] =BMUX_WENA;
   assign SPLIT_WENA[47] =BMUX_WENA;
   assign SPLIT_WENA[48] =BMUX_WENA;
   assign SPLIT_WENA[49] =BMUX_WENA;
   assign SPLIT_WENA[50] =BMUX_WENA;
   assign SPLIT_WENA[51] =BMUX_WENA;
   assign SPLIT_WENA[52] =BMUX_WENA;
   assign SPLIT_WENA[53] =BMUX_WENA;
   assign SPLIT_WENA[54] =BMUX_WENA;
   assign SPLIT_WENA[55] =BMUX_WENA;
   assign SPLIT_WENA[56] =BMUX_WENA;
   assign SPLIT_WENA[57] =BMUX_WENA;
   assign SPLIT_WENA[58] =BMUX_WENA;
   assign SPLIT_WENA[59] =BMUX_WENA;
   assign SPLIT_WENA[60] =BMUX_WENA;
   assign SPLIT_WENA[61] =BMUX_WENA;
   assign SPLIT_WENA[62] =BMUX_WENA;
   assign SPLIT_WENA[63] =BMUX_WENA;
   wire NOT_CENA;
   not (NOT_CENA, BMUX_CENA);
   wire NOT_DFTRAMBYP;
   not (NOT_DFTRAMBYP, DFTRAMBYP);
   wire [63:0] WRITEA;
   wire [63: 0] NOT_SPLIT_WENA;
   not (NOT_SPLIT_WENA[0], SPLIT_WENA[0]);
   not (NOT_SPLIT_WENA[1], SPLIT_WENA[1]);
   not (NOT_SPLIT_WENA[2], SPLIT_WENA[2]);
   not (NOT_SPLIT_WENA[3], SPLIT_WENA[3]);
   not (NOT_SPLIT_WENA[4], SPLIT_WENA[4]);
   not (NOT_SPLIT_WENA[5], SPLIT_WENA[5]);
   not (NOT_SPLIT_WENA[6], SPLIT_WENA[6]);
   not (NOT_SPLIT_WENA[7], SPLIT_WENA[7]);
   not (NOT_SPLIT_WENA[8], SPLIT_WENA[8]);
   not (NOT_SPLIT_WENA[9], SPLIT_WENA[9]);
   not (NOT_SPLIT_WENA[10], SPLIT_WENA[10]);
   not (NOT_SPLIT_WENA[11], SPLIT_WENA[11]);
   not (NOT_SPLIT_WENA[12], SPLIT_WENA[12]);
   not (NOT_SPLIT_WENA[13], SPLIT_WENA[13]);
   not (NOT_SPLIT_WENA[14], SPLIT_WENA[14]);
   not (NOT_SPLIT_WENA[15], SPLIT_WENA[15]);
   not (NOT_SPLIT_WENA[16], SPLIT_WENA[16]);
   not (NOT_SPLIT_WENA[17], SPLIT_WENA[17]);
   not (NOT_SPLIT_WENA[18], SPLIT_WENA[18]);
   not (NOT_SPLIT_WENA[19], SPLIT_WENA[19]);
   not (NOT_SPLIT_WENA[20], SPLIT_WENA[20]);
   not (NOT_SPLIT_WENA[21], SPLIT_WENA[21]);
   not (NOT_SPLIT_WENA[22], SPLIT_WENA[22]);
   not (NOT_SPLIT_WENA[23], SPLIT_WENA[23]);
   not (NOT_SPLIT_WENA[24], SPLIT_WENA[24]);
   not (NOT_SPLIT_WENA[25], SPLIT_WENA[25]);
   not (NOT_SPLIT_WENA[26], SPLIT_WENA[26]);
   not (NOT_SPLIT_WENA[27], SPLIT_WENA[27]);
   not (NOT_SPLIT_WENA[28], SPLIT_WENA[28]);
   not (NOT_SPLIT_WENA[29], SPLIT_WENA[29]);
   not (NOT_SPLIT_WENA[30], SPLIT_WENA[30]);
   not (NOT_SPLIT_WENA[31], SPLIT_WENA[31]);
   not (NOT_SPLIT_WENA[32], SPLIT_WENA[32]);
   not (NOT_SPLIT_WENA[33], SPLIT_WENA[33]);
   not (NOT_SPLIT_WENA[34], SPLIT_WENA[34]);
   not (NOT_SPLIT_WENA[35], SPLIT_WENA[35]);
   not (NOT_SPLIT_WENA[36], SPLIT_WENA[36]);
   not (NOT_SPLIT_WENA[37], SPLIT_WENA[37]);
   not (NOT_SPLIT_WENA[38], SPLIT_WENA[38]);
   not (NOT_SPLIT_WENA[39], SPLIT_WENA[39]);
   not (NOT_SPLIT_WENA[40], SPLIT_WENA[40]);
   not (NOT_SPLIT_WENA[41], SPLIT_WENA[41]);
   not (NOT_SPLIT_WENA[42], SPLIT_WENA[42]);
   not (NOT_SPLIT_WENA[43], SPLIT_WENA[43]);
   not (NOT_SPLIT_WENA[44], SPLIT_WENA[44]);
   not (NOT_SPLIT_WENA[45], SPLIT_WENA[45]);
   not (NOT_SPLIT_WENA[46], SPLIT_WENA[46]);
   not (NOT_SPLIT_WENA[47], SPLIT_WENA[47]);
   not (NOT_SPLIT_WENA[48], SPLIT_WENA[48]);
   not (NOT_SPLIT_WENA[49], SPLIT_WENA[49]);
   not (NOT_SPLIT_WENA[50], SPLIT_WENA[50]);
   not (NOT_SPLIT_WENA[51], SPLIT_WENA[51]);
   not (NOT_SPLIT_WENA[52], SPLIT_WENA[52]);
   not (NOT_SPLIT_WENA[53], SPLIT_WENA[53]);
   not (NOT_SPLIT_WENA[54], SPLIT_WENA[54]);
   not (NOT_SPLIT_WENA[55], SPLIT_WENA[55]);
   not (NOT_SPLIT_WENA[56], SPLIT_WENA[56]);
   not (NOT_SPLIT_WENA[57], SPLIT_WENA[57]);
   not (NOT_SPLIT_WENA[58], SPLIT_WENA[58]);
   not (NOT_SPLIT_WENA[59], SPLIT_WENA[59]);
   not (NOT_SPLIT_WENA[60], SPLIT_WENA[60]);
   not (NOT_SPLIT_WENA[61], SPLIT_WENA[61]);
   not (NOT_SPLIT_WENA[62], SPLIT_WENA[62]);
   not (NOT_SPLIT_WENA[63], SPLIT_WENA[63]);
   and (WRITEA[0], NOT_DFTRAMBYP, NOT_SPLIT_WENA[0], NOT_CENA);
   and (WRITEA[1], NOT_DFTRAMBYP, NOT_SPLIT_WENA[1], NOT_CENA);
   and (WRITEA[2], NOT_DFTRAMBYP, NOT_SPLIT_WENA[2], NOT_CENA);
   and (WRITEA[3], NOT_DFTRAMBYP, NOT_SPLIT_WENA[3], NOT_CENA);
   and (WRITEA[4], NOT_DFTRAMBYP, NOT_SPLIT_WENA[4], NOT_CENA);
   and (WRITEA[5], NOT_DFTRAMBYP, NOT_SPLIT_WENA[5], NOT_CENA);
   and (WRITEA[6], NOT_DFTRAMBYP, NOT_SPLIT_WENA[6], NOT_CENA);
   and (WRITEA[7], NOT_DFTRAMBYP, NOT_SPLIT_WENA[7], NOT_CENA);
   and (WRITEA[8], NOT_DFTRAMBYP, NOT_SPLIT_WENA[8], NOT_CENA);
   and (WRITEA[9], NOT_DFTRAMBYP, NOT_SPLIT_WENA[9], NOT_CENA);
   and (WRITEA[10], NOT_DFTRAMBYP, NOT_SPLIT_WENA[10], NOT_CENA);
   and (WRITEA[11], NOT_DFTRAMBYP, NOT_SPLIT_WENA[11], NOT_CENA);
   and (WRITEA[12], NOT_DFTRAMBYP, NOT_SPLIT_WENA[12], NOT_CENA);
   and (WRITEA[13], NOT_DFTRAMBYP, NOT_SPLIT_WENA[13], NOT_CENA);
   and (WRITEA[14], NOT_DFTRAMBYP, NOT_SPLIT_WENA[14], NOT_CENA);
   and (WRITEA[15], NOT_DFTRAMBYP, NOT_SPLIT_WENA[15], NOT_CENA);
   and (WRITEA[16], NOT_DFTRAMBYP, NOT_SPLIT_WENA[16], NOT_CENA);
   and (WRITEA[17], NOT_DFTRAMBYP, NOT_SPLIT_WENA[17], NOT_CENA);
   and (WRITEA[18], NOT_DFTRAMBYP, NOT_SPLIT_WENA[18], NOT_CENA);
   and (WRITEA[19], NOT_DFTRAMBYP, NOT_SPLIT_WENA[19], NOT_CENA);
   and (WRITEA[20], NOT_DFTRAMBYP, NOT_SPLIT_WENA[20], NOT_CENA);
   and (WRITEA[21], NOT_DFTRAMBYP, NOT_SPLIT_WENA[21], NOT_CENA);
   and (WRITEA[22], NOT_DFTRAMBYP, NOT_SPLIT_WENA[22], NOT_CENA);
   and (WRITEA[23], NOT_DFTRAMBYP, NOT_SPLIT_WENA[23], NOT_CENA);
   and (WRITEA[24], NOT_DFTRAMBYP, NOT_SPLIT_WENA[24], NOT_CENA);
   and (WRITEA[25], NOT_DFTRAMBYP, NOT_SPLIT_WENA[25], NOT_CENA);
   and (WRITEA[26], NOT_DFTRAMBYP, NOT_SPLIT_WENA[26], NOT_CENA);
   and (WRITEA[27], NOT_DFTRAMBYP, NOT_SPLIT_WENA[27], NOT_CENA);
   and (WRITEA[28], NOT_DFTRAMBYP, NOT_SPLIT_WENA[28], NOT_CENA);
   and (WRITEA[29], NOT_DFTRAMBYP, NOT_SPLIT_WENA[29], NOT_CENA);
   and (WRITEA[30], NOT_DFTRAMBYP, NOT_SPLIT_WENA[30], NOT_CENA);
   and (WRITEA[31], NOT_DFTRAMBYP, NOT_SPLIT_WENA[31], NOT_CENA);
   and (WRITEA[32], NOT_DFTRAMBYP, NOT_SPLIT_WENA[32], NOT_CENA);
   and (WRITEA[33], NOT_DFTRAMBYP, NOT_SPLIT_WENA[33], NOT_CENA);
   and (WRITEA[34], NOT_DFTRAMBYP, NOT_SPLIT_WENA[34], NOT_CENA);
   and (WRITEA[35], NOT_DFTRAMBYP, NOT_SPLIT_WENA[35], NOT_CENA);
   and (WRITEA[36], NOT_DFTRAMBYP, NOT_SPLIT_WENA[36], NOT_CENA);
   and (WRITEA[37], NOT_DFTRAMBYP, NOT_SPLIT_WENA[37], NOT_CENA);
   and (WRITEA[38], NOT_DFTRAMBYP, NOT_SPLIT_WENA[38], NOT_CENA);
   and (WRITEA[39], NOT_DFTRAMBYP, NOT_SPLIT_WENA[39], NOT_CENA);
   and (WRITEA[40], NOT_DFTRAMBYP, NOT_SPLIT_WENA[40], NOT_CENA);
   and (WRITEA[41], NOT_DFTRAMBYP, NOT_SPLIT_WENA[41], NOT_CENA);
   and (WRITEA[42], NOT_DFTRAMBYP, NOT_SPLIT_WENA[42], NOT_CENA);
   and (WRITEA[43], NOT_DFTRAMBYP, NOT_SPLIT_WENA[43], NOT_CENA);
   and (WRITEA[44], NOT_DFTRAMBYP, NOT_SPLIT_WENA[44], NOT_CENA);
   and (WRITEA[45], NOT_DFTRAMBYP, NOT_SPLIT_WENA[45], NOT_CENA);
   and (WRITEA[46], NOT_DFTRAMBYP, NOT_SPLIT_WENA[46], NOT_CENA);
   and (WRITEA[47], NOT_DFTRAMBYP, NOT_SPLIT_WENA[47], NOT_CENA);
   and (WRITEA[48], NOT_DFTRAMBYP, NOT_SPLIT_WENA[48], NOT_CENA);
   and (WRITEA[49], NOT_DFTRAMBYP, NOT_SPLIT_WENA[49], NOT_CENA);
   and (WRITEA[50], NOT_DFTRAMBYP, NOT_SPLIT_WENA[50], NOT_CENA);
   and (WRITEA[51], NOT_DFTRAMBYP, NOT_SPLIT_WENA[51], NOT_CENA);
   and (WRITEA[52], NOT_DFTRAMBYP, NOT_SPLIT_WENA[52], NOT_CENA);
   and (WRITEA[53], NOT_DFTRAMBYP, NOT_SPLIT_WENA[53], NOT_CENA);
   and (WRITEA[54], NOT_DFTRAMBYP, NOT_SPLIT_WENA[54], NOT_CENA);
   and (WRITEA[55], NOT_DFTRAMBYP, NOT_SPLIT_WENA[55], NOT_CENA);
   and (WRITEA[56], NOT_DFTRAMBYP, NOT_SPLIT_WENA[56], NOT_CENA);
   and (WRITEA[57], NOT_DFTRAMBYP, NOT_SPLIT_WENA[57], NOT_CENA);
   and (WRITEA[58], NOT_DFTRAMBYP, NOT_SPLIT_WENA[58], NOT_CENA);
   and (WRITEA[59], NOT_DFTRAMBYP, NOT_SPLIT_WENA[59], NOT_CENA);
   and (WRITEA[60], NOT_DFTRAMBYP, NOT_SPLIT_WENA[60], NOT_CENA);
   and (WRITEA[61], NOT_DFTRAMBYP, NOT_SPLIT_WENA[61], NOT_CENA);
   and (WRITEA[62], NOT_DFTRAMBYP, NOT_SPLIT_WENA[62], NOT_CENA);
   and (WRITEA[63], NOT_DFTRAMBYP, NOT_SPLIT_WENA[63], NOT_CENA);
   wire [63:0] READA;
   and (READA[0], NOT_CENA, SPLIT_WENA[0]);
   and (READA[1], NOT_CENA, SPLIT_WENA[1]);
   and (READA[2], NOT_CENA, SPLIT_WENA[2]);
   and (READA[3], NOT_CENA, SPLIT_WENA[3]);
   and (READA[4], NOT_CENA, SPLIT_WENA[4]);
   and (READA[5], NOT_CENA, SPLIT_WENA[5]);
   and (READA[6], NOT_CENA, SPLIT_WENA[6]);
   and (READA[7], NOT_CENA, SPLIT_WENA[7]);
   and (READA[8], NOT_CENA, SPLIT_WENA[8]);
   and (READA[9], NOT_CENA, SPLIT_WENA[9]);
   and (READA[10], NOT_CENA, SPLIT_WENA[10]);
   and (READA[11], NOT_CENA, SPLIT_WENA[11]);
   and (READA[12], NOT_CENA, SPLIT_WENA[12]);
   and (READA[13], NOT_CENA, SPLIT_WENA[13]);
   and (READA[14], NOT_CENA, SPLIT_WENA[14]);
   and (READA[15], NOT_CENA, SPLIT_WENA[15]);
   and (READA[16], NOT_CENA, SPLIT_WENA[16]);
   and (READA[17], NOT_CENA, SPLIT_WENA[17]);
   and (READA[18], NOT_CENA, SPLIT_WENA[18]);
   and (READA[19], NOT_CENA, SPLIT_WENA[19]);
   and (READA[20], NOT_CENA, SPLIT_WENA[20]);
   and (READA[21], NOT_CENA, SPLIT_WENA[21]);
   and (READA[22], NOT_CENA, SPLIT_WENA[22]);
   and (READA[23], NOT_CENA, SPLIT_WENA[23]);
   and (READA[24], NOT_CENA, SPLIT_WENA[24]);
   and (READA[25], NOT_CENA, SPLIT_WENA[25]);
   and (READA[26], NOT_CENA, SPLIT_WENA[26]);
   and (READA[27], NOT_CENA, SPLIT_WENA[27]);
   and (READA[28], NOT_CENA, SPLIT_WENA[28]);
   and (READA[29], NOT_CENA, SPLIT_WENA[29]);
   and (READA[30], NOT_CENA, SPLIT_WENA[30]);
   and (READA[31], NOT_CENA, SPLIT_WENA[31]);
   and (READA[32], NOT_CENA, SPLIT_WENA[32]);
   and (READA[33], NOT_CENA, SPLIT_WENA[33]);
   and (READA[34], NOT_CENA, SPLIT_WENA[34]);
   and (READA[35], NOT_CENA, SPLIT_WENA[35]);
   and (READA[36], NOT_CENA, SPLIT_WENA[36]);
   and (READA[37], NOT_CENA, SPLIT_WENA[37]);
   and (READA[38], NOT_CENA, SPLIT_WENA[38]);
   and (READA[39], NOT_CENA, SPLIT_WENA[39]);
   and (READA[40], NOT_CENA, SPLIT_WENA[40]);
   and (READA[41], NOT_CENA, SPLIT_WENA[41]);
   and (READA[42], NOT_CENA, SPLIT_WENA[42]);
   and (READA[43], NOT_CENA, SPLIT_WENA[43]);
   and (READA[44], NOT_CENA, SPLIT_WENA[44]);
   and (READA[45], NOT_CENA, SPLIT_WENA[45]);
   and (READA[46], NOT_CENA, SPLIT_WENA[46]);
   and (READA[47], NOT_CENA, SPLIT_WENA[47]);
   and (READA[48], NOT_CENA, SPLIT_WENA[48]);
   and (READA[49], NOT_CENA, SPLIT_WENA[49]);
   and (READA[50], NOT_CENA, SPLIT_WENA[50]);
   and (READA[51], NOT_CENA, SPLIT_WENA[51]);
   and (READA[52], NOT_CENA, SPLIT_WENA[52]);
   and (READA[53], NOT_CENA, SPLIT_WENA[53]);
   and (READA[54], NOT_CENA, SPLIT_WENA[54]);
   and (READA[55], NOT_CENA, SPLIT_WENA[55]);
   and (READA[56], NOT_CENA, SPLIT_WENA[56]);
   and (READA[57], NOT_CENA, SPLIT_WENA[57]);
   and (READA[58], NOT_CENA, SPLIT_WENA[58]);
   and (READA[59], NOT_CENA, SPLIT_WENA[59]);
   and (READA[60], NOT_CENA, SPLIT_WENA[60]);
   and (READA[61], NOT_CENA, SPLIT_WENA[61]);
   and (READA[62], NOT_CENA, SPLIT_WENA[62]);
   and (READA[63], NOT_CENA, SPLIT_WENA[63]);
   xor (x_detection_CENA, BMUX_CENA, BMUX_CENA);
   and (acendftA, x_detection_CENA, NOT_DFTRAMBYP);
   assign XoutA = (SEA & ~DFTRAMBYP) | acendftA;
   _MUX reA0 (READA[0], QA[0], INT_QA[0], READ_QA[0]);
   _MUX reA1 (READA[1], QA[1], INT_QA[1], READ_QA[1]);
   _MUX reA2 (READA[2], QA[2], INT_QA[2], READ_QA[2]);
   _MUX reA3 (READA[3], QA[3], INT_QA[3], READ_QA[3]);
   _MUX reA4 (READA[4], QA[4], INT_QA[4], READ_QA[4]);
   _MUX reA5 (READA[5], QA[5], INT_QA[5], READ_QA[5]);
   _MUX reA6 (READA[6], QA[6], INT_QA[6], READ_QA[6]);
   _MUX reA7 (READA[7], QA[7], INT_QA[7], READ_QA[7]);
   _MUX reA8 (READA[8], QA[8], INT_QA[8], READ_QA[8]);
   _MUX reA9 (READA[9], QA[9], INT_QA[9], READ_QA[9]);
   _MUX reA10 (READA[10], QA[10], INT_QA[10], READ_QA[10]);
   _MUX reA11 (READA[11], QA[11], INT_QA[11], READ_QA[11]);
   _MUX reA12 (READA[12], QA[12], INT_QA[12], READ_QA[12]);
   _MUX reA13 (READA[13], QA[13], INT_QA[13], READ_QA[13]);
   _MUX reA14 (READA[14], QA[14], INT_QA[14], READ_QA[14]);
   _MUX reA15 (READA[15], QA[15], INT_QA[15], READ_QA[15]);
   _MUX reA16 (READA[16], QA[16], INT_QA[16], READ_QA[16]);
   _MUX reA17 (READA[17], QA[17], INT_QA[17], READ_QA[17]);
   _MUX reA18 (READA[18], QA[18], INT_QA[18], READ_QA[18]);
   _MUX reA19 (READA[19], QA[19], INT_QA[19], READ_QA[19]);
   _MUX reA20 (READA[20], QA[20], INT_QA[20], READ_QA[20]);
   _MUX reA21 (READA[21], QA[21], INT_QA[21], READ_QA[21]);
   _MUX reA22 (READA[22], QA[22], INT_QA[22], READ_QA[22]);
   _MUX reA23 (READA[23], QA[23], INT_QA[23], READ_QA[23]);
   _MUX reA24 (READA[24], QA[24], INT_QA[24], READ_QA[24]);
   _MUX reA25 (READA[25], QA[25], INT_QA[25], READ_QA[25]);
   _MUX reA26 (READA[26], QA[26], INT_QA[26], READ_QA[26]);
   _MUX reA27 (READA[27], QA[27], INT_QA[27], READ_QA[27]);
   _MUX reA28 (READA[28], QA[28], INT_QA[28], READ_QA[28]);
   _MUX reA29 (READA[29], QA[29], INT_QA[29], READ_QA[29]);
   _MUX reA30 (READA[30], QA[30], INT_QA[30], READ_QA[30]);
   _MUX reA31 (READA[31], QA[31], INT_QA[31], READ_QA[31]);
   _MUX reA32 (READA[32], QA[32], INT_QA[32], READ_QA[32]);
   _MUX reA33 (READA[33], QA[33], INT_QA[33], READ_QA[33]);
   _MUX reA34 (READA[34], QA[34], INT_QA[34], READ_QA[34]);
   _MUX reA35 (READA[35], QA[35], INT_QA[35], READ_QA[35]);
   _MUX reA36 (READA[36], QA[36], INT_QA[36], READ_QA[36]);
   _MUX reA37 (READA[37], QA[37], INT_QA[37], READ_QA[37]);
   _MUX reA38 (READA[38], QA[38], INT_QA[38], READ_QA[38]);
   _MUX reA39 (READA[39], QA[39], INT_QA[39], READ_QA[39]);
   _MUX reA40 (READA[40], QA[40], INT_QA[40], READ_QA[40]);
   _MUX reA41 (READA[41], QA[41], INT_QA[41], READ_QA[41]);
   _MUX reA42 (READA[42], QA[42], INT_QA[42], READ_QA[42]);
   _MUX reA43 (READA[43], QA[43], INT_QA[43], READ_QA[43]);
   _MUX reA44 (READA[44], QA[44], INT_QA[44], READ_QA[44]);
   _MUX reA45 (READA[45], QA[45], INT_QA[45], READ_QA[45]);
   _MUX reA46 (READA[46], QA[46], INT_QA[46], READ_QA[46]);
   _MUX reA47 (READA[47], QA[47], INT_QA[47], READ_QA[47]);
   _MUX reA48 (READA[48], QA[48], INT_QA[48], READ_QA[48]);
   _MUX reA49 (READA[49], QA[49], INT_QA[49], READ_QA[49]);
   _MUX reA50 (READA[50], QA[50], INT_QA[50], READ_QA[50]);
   _MUX reA51 (READA[51], QA[51], INT_QA[51], READ_QA[51]);
   _MUX reA52 (READA[52], QA[52], INT_QA[52], READ_QA[52]);
   _MUX reA53 (READA[53], QA[53], INT_QA[53], READ_QA[53]);
   _MUX reA54 (READA[54], QA[54], INT_QA[54], READ_QA[54]);
   _MUX reA55 (READA[55], QA[55], INT_QA[55], READ_QA[55]);
   _MUX reA56 (READA[56], QA[56], INT_QA[56], READ_QA[56]);
   _MUX reA57 (READA[57], QA[57], INT_QA[57], READ_QA[57]);
   _MUX reA58 (READA[58], QA[58], INT_QA[58], READ_QA[58]);
   _MUX reA59 (READA[59], QA[59], INT_QA[59], READ_QA[59]);
   _MUX reA60 (READA[60], QA[60], INT_QA[60], READ_QA[60]);
   _MUX reA61 (READA[61], QA[61], INT_QA[61], READ_QA[61]);
   _MUX reA62 (READA[62], QA[62], INT_QA[62], READ_QA[62]);
   _MUX reA63 (READA[63], QA[63], INT_QA[63], READ_QA[63]);
   wire [7:0] AAXOR;
   xor (AAXOR[0], BMUX_AA[0], BMUX_AA[0]);
   xor (AAXOR[1], BMUX_AA[1], BMUX_AA[1]);
   xor (AAXOR[2], BMUX_AA[2], BMUX_AA[2]);
   xor (AAXOR[3], BMUX_AA[3], BMUX_AA[3]);
   xor (AAXOR[4], BMUX_AA[4], BMUX_AA[4]);
   xor (AAXOR[5], BMUX_AA[5], BMUX_AA[5]);
   xor (AAXOR[6], BMUX_AA[6], BMUX_AA[6]);
   xor (AAXOR[7], BMUX_AA[7], BMUX_AA[7]);
   wire xA_addr;
   or (xA_addr, AAXOR[0], AAXOR[1], AAXOR[2], AAXOR[3], AAXOR[4], AAXOR[5], AAXOR[6], AAXOR[7]);
   _MUX rxA0 (xA_addr, READ_QA[0], 1'bX, READ_QAX[0]);
   _MUX rxA1 (xA_addr, READ_QA[1], 1'bX, READ_QAX[1]);
   _MUX rxA2 (xA_addr, READ_QA[2], 1'bX, READ_QAX[2]);
   _MUX rxA3 (xA_addr, READ_QA[3], 1'bX, READ_QAX[3]);
   _MUX rxA4 (xA_addr, READ_QA[4], 1'bX, READ_QAX[4]);
   _MUX rxA5 (xA_addr, READ_QA[5], 1'bX, READ_QAX[5]);
   _MUX rxA6 (xA_addr, READ_QA[6], 1'bX, READ_QAX[6]);
   _MUX rxA7 (xA_addr, READ_QA[7], 1'bX, READ_QAX[7]);
   _MUX rxA8 (xA_addr, READ_QA[8], 1'bX, READ_QAX[8]);
   _MUX rxA9 (xA_addr, READ_QA[9], 1'bX, READ_QAX[9]);
   _MUX rxA10 (xA_addr, READ_QA[10], 1'bX, READ_QAX[10]);
   _MUX rxA11 (xA_addr, READ_QA[11], 1'bX, READ_QAX[11]);
   _MUX rxA12 (xA_addr, READ_QA[12], 1'bX, READ_QAX[12]);
   _MUX rxA13 (xA_addr, READ_QA[13], 1'bX, READ_QAX[13]);
   _MUX rxA14 (xA_addr, READ_QA[14], 1'bX, READ_QAX[14]);
   _MUX rxA15 (xA_addr, READ_QA[15], 1'bX, READ_QAX[15]);
   _MUX rxA16 (xA_addr, READ_QA[16], 1'bX, READ_QAX[16]);
   _MUX rxA17 (xA_addr, READ_QA[17], 1'bX, READ_QAX[17]);
   _MUX rxA18 (xA_addr, READ_QA[18], 1'bX, READ_QAX[18]);
   _MUX rxA19 (xA_addr, READ_QA[19], 1'bX, READ_QAX[19]);
   _MUX rxA20 (xA_addr, READ_QA[20], 1'bX, READ_QAX[20]);
   _MUX rxA21 (xA_addr, READ_QA[21], 1'bX, READ_QAX[21]);
   _MUX rxA22 (xA_addr, READ_QA[22], 1'bX, READ_QAX[22]);
   _MUX rxA23 (xA_addr, READ_QA[23], 1'bX, READ_QAX[23]);
   _MUX rxA24 (xA_addr, READ_QA[24], 1'bX, READ_QAX[24]);
   _MUX rxA25 (xA_addr, READ_QA[25], 1'bX, READ_QAX[25]);
   _MUX rxA26 (xA_addr, READ_QA[26], 1'bX, READ_QAX[26]);
   _MUX rxA27 (xA_addr, READ_QA[27], 1'bX, READ_QAX[27]);
   _MUX rxA28 (xA_addr, READ_QA[28], 1'bX, READ_QAX[28]);
   _MUX rxA29 (xA_addr, READ_QA[29], 1'bX, READ_QAX[29]);
   _MUX rxA30 (xA_addr, READ_QA[30], 1'bX, READ_QAX[30]);
   _MUX rxA31 (xA_addr, READ_QA[31], 1'bX, READ_QAX[31]);
   _MUX rxA32 (xA_addr, READ_QA[32], 1'bX, READ_QAX[32]);
   _MUX rxA33 (xA_addr, READ_QA[33], 1'bX, READ_QAX[33]);
   _MUX rxA34 (xA_addr, READ_QA[34], 1'bX, READ_QAX[34]);
   _MUX rxA35 (xA_addr, READ_QA[35], 1'bX, READ_QAX[35]);
   _MUX rxA36 (xA_addr, READ_QA[36], 1'bX, READ_QAX[36]);
   _MUX rxA37 (xA_addr, READ_QA[37], 1'bX, READ_QAX[37]);
   _MUX rxA38 (xA_addr, READ_QA[38], 1'bX, READ_QAX[38]);
   _MUX rxA39 (xA_addr, READ_QA[39], 1'bX, READ_QAX[39]);
   _MUX rxA40 (xA_addr, READ_QA[40], 1'bX, READ_QAX[40]);
   _MUX rxA41 (xA_addr, READ_QA[41], 1'bX, READ_QAX[41]);
   _MUX rxA42 (xA_addr, READ_QA[42], 1'bX, READ_QAX[42]);
   _MUX rxA43 (xA_addr, READ_QA[43], 1'bX, READ_QAX[43]);
   _MUX rxA44 (xA_addr, READ_QA[44], 1'bX, READ_QAX[44]);
   _MUX rxA45 (xA_addr, READ_QA[45], 1'bX, READ_QAX[45]);
   _MUX rxA46 (xA_addr, READ_QA[46], 1'bX, READ_QAX[46]);
   _MUX rxA47 (xA_addr, READ_QA[47], 1'bX, READ_QAX[47]);
   _MUX rxA48 (xA_addr, READ_QA[48], 1'bX, READ_QAX[48]);
   _MUX rxA49 (xA_addr, READ_QA[49], 1'bX, READ_QAX[49]);
   _MUX rxA50 (xA_addr, READ_QA[50], 1'bX, READ_QAX[50]);
   _MUX rxA51 (xA_addr, READ_QA[51], 1'bX, READ_QAX[51]);
   _MUX rxA52 (xA_addr, READ_QA[52], 1'bX, READ_QAX[52]);
   _MUX rxA53 (xA_addr, READ_QA[53], 1'bX, READ_QAX[53]);
   _MUX rxA54 (xA_addr, READ_QA[54], 1'bX, READ_QAX[54]);
   _MUX rxA55 (xA_addr, READ_QA[55], 1'bX, READ_QAX[55]);
   _MUX rxA56 (xA_addr, READ_QA[56], 1'bX, READ_QAX[56]);
   _MUX rxA57 (xA_addr, READ_QA[57], 1'bX, READ_QAX[57]);
   _MUX rxA58 (xA_addr, READ_QA[58], 1'bX, READ_QAX[58]);
   _MUX rxA59 (xA_addr, READ_QA[59], 1'bX, READ_QAX[59]);
   _MUX rxA60 (xA_addr, READ_QA[60], 1'bX, READ_QAX[60]);
   _MUX rxA61 (xA_addr, READ_QA[61], 1'bX, READ_QAX[61]);
   _MUX rxA62 (xA_addr, READ_QA[62], 1'bX, READ_QAX[62]);
   _MUX rxA63 (xA_addr, READ_QA[63], 1'bX, READ_QAX[63]);
   _MUX mqA0 (DFTRAMBYP, READ_QAX[0], BMUX_DA[0], DA_scan[0]);
   _MUX mqA1 (DFTRAMBYP, READ_QAX[1], BMUX_DA[1], DA_scan[1]);
   _MUX mqA2 (DFTRAMBYP, READ_QAX[2], BMUX_DA[2], DA_scan[2]);
   _MUX mqA3 (DFTRAMBYP, READ_QAX[3], BMUX_DA[3], DA_scan[3]);
   _MUX mqA4 (DFTRAMBYP, READ_QAX[4], BMUX_DA[4], DA_scan[4]);
   _MUX mqA5 (DFTRAMBYP, READ_QAX[5], BMUX_DA[5], DA_scan[5]);
   _MUX mqA6 (DFTRAMBYP, READ_QAX[6], BMUX_DA[6], DA_scan[6]);
   _MUX mqA7 (DFTRAMBYP, READ_QAX[7], BMUX_DA[7], DA_scan[7]);
   _MUX mqA8 (DFTRAMBYP, READ_QAX[8], BMUX_DA[8], DA_scan[8]);
   _MUX mqA9 (DFTRAMBYP, READ_QAX[9], BMUX_DA[9], DA_scan[9]);
   _MUX mqA10 (DFTRAMBYP, READ_QAX[10], BMUX_DA[10], DA_scan[10]);
   _MUX mqA11 (DFTRAMBYP, READ_QAX[11], BMUX_DA[11], DA_scan[11]);
   _MUX mqA12 (DFTRAMBYP, READ_QAX[12], BMUX_DA[12], DA_scan[12]);
   _MUX mqA13 (DFTRAMBYP, READ_QAX[13], BMUX_DA[13], DA_scan[13]);
   _MUX mqA14 (DFTRAMBYP, READ_QAX[14], BMUX_DA[14], DA_scan[14]);
   _MUX mqA15 (DFTRAMBYP, READ_QAX[15], BMUX_DA[15], DA_scan[15]);
   _MUX mqA16 (DFTRAMBYP, READ_QAX[16], BMUX_DA[16], DA_scan[16]);
   _MUX mqA17 (DFTRAMBYP, READ_QAX[17], BMUX_DA[17], DA_scan[17]);
   _MUX mqA18 (DFTRAMBYP, READ_QAX[18], BMUX_DA[18], DA_scan[18]);
   _MUX mqA19 (DFTRAMBYP, READ_QAX[19], BMUX_DA[19], DA_scan[19]);
   _MUX mqA20 (DFTRAMBYP, READ_QAX[20], BMUX_DA[20], DA_scan[20]);
   _MUX mqA21 (DFTRAMBYP, READ_QAX[21], BMUX_DA[21], DA_scan[21]);
   _MUX mqA22 (DFTRAMBYP, READ_QAX[22], BMUX_DA[22], DA_scan[22]);
   _MUX mqA23 (DFTRAMBYP, READ_QAX[23], BMUX_DA[23], DA_scan[23]);
   _MUX mqA24 (DFTRAMBYP, READ_QAX[24], BMUX_DA[24], DA_scan[24]);
   _MUX mqA25 (DFTRAMBYP, READ_QAX[25], BMUX_DA[25], DA_scan[25]);
   _MUX mqA26 (DFTRAMBYP, READ_QAX[26], BMUX_DA[26], DA_scan[26]);
   _MUX mqA27 (DFTRAMBYP, READ_QAX[27], BMUX_DA[27], DA_scan[27]);
   _MUX mqA28 (DFTRAMBYP, READ_QAX[28], BMUX_DA[28], DA_scan[28]);
   _MUX mqA29 (DFTRAMBYP, READ_QAX[29], BMUX_DA[29], DA_scan[29]);
   _MUX mqA30 (DFTRAMBYP, READ_QAX[30], BMUX_DA[30], DA_scan[30]);
   _MUX mqA31 (DFTRAMBYP, READ_QAX[31], BMUX_DA[31], DA_scan[31]);
   _MUX mqA32 (DFTRAMBYP, READ_QAX[32], BMUX_DA[32], DA_scan[32]);
   _MUX mqA33 (DFTRAMBYP, READ_QAX[33], BMUX_DA[33], DA_scan[33]);
   _MUX mqA34 (DFTRAMBYP, READ_QAX[34], BMUX_DA[34], DA_scan[34]);
   _MUX mqA35 (DFTRAMBYP, READ_QAX[35], BMUX_DA[35], DA_scan[35]);
   _MUX mqA36 (DFTRAMBYP, READ_QAX[36], BMUX_DA[36], DA_scan[36]);
   _MUX mqA37 (DFTRAMBYP, READ_QAX[37], BMUX_DA[37], DA_scan[37]);
   _MUX mqA38 (DFTRAMBYP, READ_QAX[38], BMUX_DA[38], DA_scan[38]);
   _MUX mqA39 (DFTRAMBYP, READ_QAX[39], BMUX_DA[39], DA_scan[39]);
   _MUX mqA40 (DFTRAMBYP, READ_QAX[40], BMUX_DA[40], DA_scan[40]);
   _MUX mqA41 (DFTRAMBYP, READ_QAX[41], BMUX_DA[41], DA_scan[41]);
   _MUX mqA42 (DFTRAMBYP, READ_QAX[42], BMUX_DA[42], DA_scan[42]);
   _MUX mqA43 (DFTRAMBYP, READ_QAX[43], BMUX_DA[43], DA_scan[43]);
   _MUX mqA44 (DFTRAMBYP, READ_QAX[44], BMUX_DA[44], DA_scan[44]);
   _MUX mqA45 (DFTRAMBYP, READ_QAX[45], BMUX_DA[45], DA_scan[45]);
   _MUX mqA46 (DFTRAMBYP, READ_QAX[46], BMUX_DA[46], DA_scan[46]);
   _MUX mqA47 (DFTRAMBYP, READ_QAX[47], BMUX_DA[47], DA_scan[47]);
   _MUX mqA48 (DFTRAMBYP, READ_QAX[48], BMUX_DA[48], DA_scan[48]);
   _MUX mqA49 (DFTRAMBYP, READ_QAX[49], BMUX_DA[49], DA_scan[49]);
   _MUX mqA50 (DFTRAMBYP, READ_QAX[50], BMUX_DA[50], DA_scan[50]);
   _MUX mqA51 (DFTRAMBYP, READ_QAX[51], BMUX_DA[51], DA_scan[51]);
   _MUX mqA52 (DFTRAMBYP, READ_QAX[52], BMUX_DA[52], DA_scan[52]);
   _MUX mqA53 (DFTRAMBYP, READ_QAX[53], BMUX_DA[53], DA_scan[53]);
   _MUX mqA54 (DFTRAMBYP, READ_QAX[54], BMUX_DA[54], DA_scan[54]);
   _MUX mqA55 (DFTRAMBYP, READ_QAX[55], BMUX_DA[55], DA_scan[55]);
   _MUX mqA56 (DFTRAMBYP, READ_QAX[56], BMUX_DA[56], DA_scan[56]);
   _MUX mqA57 (DFTRAMBYP, READ_QAX[57], BMUX_DA[57], DA_scan[57]);
   _MUX mqA58 (DFTRAMBYP, READ_QAX[58], BMUX_DA[58], DA_scan[58]);
   _MUX mqA59 (DFTRAMBYP, READ_QAX[59], BMUX_DA[59], DA_scan[59]);
   _MUX mqA60 (DFTRAMBYP, READ_QAX[60], BMUX_DA[60], DA_scan[60]);
   _MUX mqA61 (DFTRAMBYP, READ_QAX[61], BMUX_DA[61], DA_scan[61]);
   _MUX mqA62 (DFTRAMBYP, READ_QAX[62], BMUX_DA[62], DA_scan[62]);
   _MUX mqA63 (DFTRAMBYP, READ_QAX[63], BMUX_DA[63], DA_scan[63]);
   SRAMdpw64d256_scanflop uDQA0 (.CLK(CLKA), .SE(SEA), .SI(BUS_SIA[0]), .D(DA_scan[0]), .Q(QA[0]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA1 (.CLK(CLKA), .SE(SEA), .SI(QA[0]), .D(DA_scan[1]), .Q(QA[1]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA2 (.CLK(CLKA), .SE(SEA), .SI(QA[1]), .D(DA_scan[2]), .Q(QA[2]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA3 (.CLK(CLKA), .SE(SEA), .SI(QA[2]), .D(DA_scan[3]), .Q(QA[3]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA4 (.CLK(CLKA), .SE(SEA), .SI(QA[3]), .D(DA_scan[4]), .Q(QA[4]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA5 (.CLK(CLKA), .SE(SEA), .SI(QA[4]), .D(DA_scan[5]), .Q(QA[5]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA6 (.CLK(CLKA), .SE(SEA), .SI(QA[5]), .D(DA_scan[6]), .Q(QA[6]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA7 (.CLK(CLKA), .SE(SEA), .SI(QA[6]), .D(DA_scan[7]), .Q(QA[7]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA8 (.CLK(CLKA), .SE(SEA), .SI(QA[7]), .D(DA_scan[8]), .Q(QA[8]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA9 (.CLK(CLKA), .SE(SEA), .SI(QA[8]), .D(DA_scan[9]), .Q(QA[9]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA10 (.CLK(CLKA), .SE(SEA), .SI(QA[9]), .D(DA_scan[10]), .Q(QA[10]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA11 (.CLK(CLKA), .SE(SEA), .SI(QA[10]), .D(DA_scan[11]), .Q(QA[11]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA12 (.CLK(CLKA), .SE(SEA), .SI(QA[11]), .D(DA_scan[12]), .Q(QA[12]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA13 (.CLK(CLKA), .SE(SEA), .SI(QA[12]), .D(DA_scan[13]), .Q(QA[13]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA14 (.CLK(CLKA), .SE(SEA), .SI(QA[13]), .D(DA_scan[14]), .Q(QA[14]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA15 (.CLK(CLKA), .SE(SEA), .SI(QA[14]), .D(DA_scan[15]), .Q(QA[15]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA16 (.CLK(CLKA), .SE(SEA), .SI(QA[15]), .D(DA_scan[16]), .Q(QA[16]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA17 (.CLK(CLKA), .SE(SEA), .SI(QA[16]), .D(DA_scan[17]), .Q(QA[17]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA18 (.CLK(CLKA), .SE(SEA), .SI(QA[17]), .D(DA_scan[18]), .Q(QA[18]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA19 (.CLK(CLKA), .SE(SEA), .SI(QA[18]), .D(DA_scan[19]), .Q(QA[19]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA20 (.CLK(CLKA), .SE(SEA), .SI(QA[19]), .D(DA_scan[20]), .Q(QA[20]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA21 (.CLK(CLKA), .SE(SEA), .SI(QA[20]), .D(DA_scan[21]), .Q(QA[21]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA22 (.CLK(CLKA), .SE(SEA), .SI(QA[21]), .D(DA_scan[22]), .Q(QA[22]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA23 (.CLK(CLKA), .SE(SEA), .SI(QA[22]), .D(DA_scan[23]), .Q(QA[23]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA24 (.CLK(CLKA), .SE(SEA), .SI(QA[23]), .D(DA_scan[24]), .Q(QA[24]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA25 (.CLK(CLKA), .SE(SEA), .SI(QA[24]), .D(DA_scan[25]), .Q(QA[25]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA26 (.CLK(CLKA), .SE(SEA), .SI(QA[25]), .D(DA_scan[26]), .Q(QA[26]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA27 (.CLK(CLKA), .SE(SEA), .SI(QA[26]), .D(DA_scan[27]), .Q(QA[27]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA28 (.CLK(CLKA), .SE(SEA), .SI(QA[27]), .D(DA_scan[28]), .Q(QA[28]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA29 (.CLK(CLKA), .SE(SEA), .SI(QA[28]), .D(DA_scan[29]), .Q(QA[29]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA30 (.CLK(CLKA), .SE(SEA), .SI(QA[29]), .D(DA_scan[30]), .Q(QA[30]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA31 (.CLK(CLKA), .SE(SEA), .SI(QA[30]), .D(DA_scan[31]), .Q(QA[31]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA32 (.CLK(CLKA), .SE(SEA), .SI(QA[33]), .D(DA_scan[32]), .Q(QA[32]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA33 (.CLK(CLKA), .SE(SEA), .SI(QA[34]), .D(DA_scan[33]), .Q(QA[33]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA34 (.CLK(CLKA), .SE(SEA), .SI(QA[35]), .D(DA_scan[34]), .Q(QA[34]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA35 (.CLK(CLKA), .SE(SEA), .SI(QA[36]), .D(DA_scan[35]), .Q(QA[35]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA36 (.CLK(CLKA), .SE(SEA), .SI(QA[37]), .D(DA_scan[36]), .Q(QA[36]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA37 (.CLK(CLKA), .SE(SEA), .SI(QA[38]), .D(DA_scan[37]), .Q(QA[37]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA38 (.CLK(CLKA), .SE(SEA), .SI(QA[39]), .D(DA_scan[38]), .Q(QA[38]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA39 (.CLK(CLKA), .SE(SEA), .SI(QA[40]), .D(DA_scan[39]), .Q(QA[39]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA40 (.CLK(CLKA), .SE(SEA), .SI(QA[41]), .D(DA_scan[40]), .Q(QA[40]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA41 (.CLK(CLKA), .SE(SEA), .SI(QA[42]), .D(DA_scan[41]), .Q(QA[41]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA42 (.CLK(CLKA), .SE(SEA), .SI(QA[43]), .D(DA_scan[42]), .Q(QA[42]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA43 (.CLK(CLKA), .SE(SEA), .SI(QA[44]), .D(DA_scan[43]), .Q(QA[43]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA44 (.CLK(CLKA), .SE(SEA), .SI(QA[45]), .D(DA_scan[44]), .Q(QA[44]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA45 (.CLK(CLKA), .SE(SEA), .SI(QA[46]), .D(DA_scan[45]), .Q(QA[45]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA46 (.CLK(CLKA), .SE(SEA), .SI(QA[47]), .D(DA_scan[46]), .Q(QA[46]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA47 (.CLK(CLKA), .SE(SEA), .SI(QA[48]), .D(DA_scan[47]), .Q(QA[47]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA48 (.CLK(CLKA), .SE(SEA), .SI(QA[49]), .D(DA_scan[48]), .Q(QA[48]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA49 (.CLK(CLKA), .SE(SEA), .SI(QA[50]), .D(DA_scan[49]), .Q(QA[49]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA50 (.CLK(CLKA), .SE(SEA), .SI(QA[51]), .D(DA_scan[50]), .Q(QA[50]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA51 (.CLK(CLKA), .SE(SEA), .SI(QA[52]), .D(DA_scan[51]), .Q(QA[51]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA52 (.CLK(CLKA), .SE(SEA), .SI(QA[53]), .D(DA_scan[52]), .Q(QA[52]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA53 (.CLK(CLKA), .SE(SEA), .SI(QA[54]), .D(DA_scan[53]), .Q(QA[53]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA54 (.CLK(CLKA), .SE(SEA), .SI(QA[55]), .D(DA_scan[54]), .Q(QA[54]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA55 (.CLK(CLKA), .SE(SEA), .SI(QA[56]), .D(DA_scan[55]), .Q(QA[55]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA56 (.CLK(CLKA), .SE(SEA), .SI(QA[57]), .D(DA_scan[56]), .Q(QA[56]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA57 (.CLK(CLKA), .SE(SEA), .SI(QA[58]), .D(DA_scan[57]), .Q(QA[57]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA58 (.CLK(CLKA), .SE(SEA), .SI(QA[59]), .D(DA_scan[58]), .Q(QA[58]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA59 (.CLK(CLKA), .SE(SEA), .SI(QA[60]), .D(DA_scan[59]), .Q(QA[59]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA60 (.CLK(CLKA), .SE(SEA), .SI(QA[61]), .D(DA_scan[60]), .Q(QA[60]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA61 (.CLK(CLKA), .SE(SEA), .SI(QA[62]), .D(DA_scan[61]), .Q(QA[61]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA62 (.CLK(CLKA), .SE(SEA), .SI(QA[63]), .D(DA_scan[62]), .Q(QA[62]), .Xout(XoutAiff));
   SRAMdpw64d256_scanflop uDQA63 (.CLK(CLKA), .SE(SEA), .SI(BUS_SIA[1]), .D(DA_scan[63]), .Q(QA[63]), .Xout(XoutAiff));
   assign SOA[0] = QA[31];
   assign SOA[1] = QA[32];
   wire [1:0] BUS_SIB;
   assign BUS_SIB[0] = SIB[0];
   assign BUS_SIB[1] = SIB[1];
   wire [7:0] BUS_AB;
   assign BUS_AB = AB;
   wire [63:0] BUS_DB;
  assign BUS_DB = DB;
   wire [63:0] DB_scan;
   wire BUS_WENB;
  assign BUS_WENB = WENB;
   wire [7:0] BMUX_AB;
   wire [7:0] BMUXSEL_AB;
   wire [63:0] BMUX_DB;
   wire BMUX_CENB;
   wire BMUXSEL_CENB;
   wire BMUX_WENB;
   wire BMUXSEL_WENB;
   wire [63:0] INT_QB;
   wire [63:0] READ_QB;
  _MUX maB0 (TENB, TAB[0], BUS_AB[0], BMUX_AB[0]);
  _MUX maselB0 (DFTRAMBYP, 1'b0, BMUX_AB[0], BMUXSEL_AB[0]);
  buf bufmaB0(AYB[0],BMUXSEL_AB[0]);
  _MUX maB1 (TENB, TAB[1], BUS_AB[1], BMUX_AB[1]);
  _MUX maselB1 (DFTRAMBYP, 1'b0, BMUX_AB[1], BMUXSEL_AB[1]);
  buf bufmaB1(AYB[1],BMUXSEL_AB[1]);
  _MUX maB2 (TENB, TAB[2], BUS_AB[2], BMUX_AB[2]);
  _MUX maselB2 (DFTRAMBYP, 1'b0, BMUX_AB[2], BMUXSEL_AB[2]);
  buf bufmaB2(AYB[2],BMUXSEL_AB[2]);
  _MUX maB3 (TENB, TAB[3], BUS_AB[3], BMUX_AB[3]);
  _MUX maselB3 (DFTRAMBYP, 1'b0, BMUX_AB[3], BMUXSEL_AB[3]);
  buf bufmaB3(AYB[3],BMUXSEL_AB[3]);
  _MUX maB4 (TENB, TAB[4], BUS_AB[4], BMUX_AB[4]);
  _MUX maselB4 (DFTRAMBYP, 1'b0, BMUX_AB[4], BMUXSEL_AB[4]);
  buf bufmaB4(AYB[4],BMUXSEL_AB[4]);
  _MUX maB5 (TENB, TAB[5], BUS_AB[5], BMUX_AB[5]);
  _MUX maselB5 (DFTRAMBYP, 1'b0, BMUX_AB[5], BMUXSEL_AB[5]);
  buf bufmaB5(AYB[5],BMUXSEL_AB[5]);
  _MUX maB6 (TENB, TAB[6], BUS_AB[6], BMUX_AB[6]);
  _MUX maselB6 (DFTRAMBYP, 1'b0, BMUX_AB[6], BMUXSEL_AB[6]);
  buf bufmaB6(AYB[6],BMUXSEL_AB[6]);
  _MUX maB7 (TENB, TAB[7], BUS_AB[7], BMUX_AB[7]);
  _MUX maselB7 (DFTRAMBYP, 1'b0, BMUX_AB[7], BMUXSEL_AB[7]);
  buf bufmaB7(AYB[7],BMUXSEL_AB[7]);

  _MUX mdB0 (TENB, TDB[0], BUS_DB[0], BMUX_DB[0]);
  _MUX mdB1 (TENB, TDB[1], BUS_DB[1], BMUX_DB[1]);
  _MUX mdB2 (TENB, TDB[2], BUS_DB[2], BMUX_DB[2]);
  _MUX mdB3 (TENB, TDB[3], BUS_DB[3], BMUX_DB[3]);
  _MUX mdB4 (TENB, TDB[4], BUS_DB[4], BMUX_DB[4]);
  _MUX mdB5 (TENB, TDB[5], BUS_DB[5], BMUX_DB[5]);
  _MUX mdB6 (TENB, TDB[6], BUS_DB[6], BMUX_DB[6]);
  _MUX mdB7 (TENB, TDB[7], BUS_DB[7], BMUX_DB[7]);
  _MUX mdB8 (TENB, TDB[8], BUS_DB[8], BMUX_DB[8]);
  _MUX mdB9 (TENB, TDB[9], BUS_DB[9], BMUX_DB[9]);
  _MUX mdB10 (TENB, TDB[10], BUS_DB[10], BMUX_DB[10]);
  _MUX mdB11 (TENB, TDB[11], BUS_DB[11], BMUX_DB[11]);
  _MUX mdB12 (TENB, TDB[12], BUS_DB[12], BMUX_DB[12]);
  _MUX mdB13 (TENB, TDB[13], BUS_DB[13], BMUX_DB[13]);
  _MUX mdB14 (TENB, TDB[14], BUS_DB[14], BMUX_DB[14]);
  _MUX mdB15 (TENB, TDB[15], BUS_DB[15], BMUX_DB[15]);
  _MUX mdB16 (TENB, TDB[16], BUS_DB[16], BMUX_DB[16]);
  _MUX mdB17 (TENB, TDB[17], BUS_DB[17], BMUX_DB[17]);
  _MUX mdB18 (TENB, TDB[18], BUS_DB[18], BMUX_DB[18]);
  _MUX mdB19 (TENB, TDB[19], BUS_DB[19], BMUX_DB[19]);
  _MUX mdB20 (TENB, TDB[20], BUS_DB[20], BMUX_DB[20]);
  _MUX mdB21 (TENB, TDB[21], BUS_DB[21], BMUX_DB[21]);
  _MUX mdB22 (TENB, TDB[22], BUS_DB[22], BMUX_DB[22]);
  _MUX mdB23 (TENB, TDB[23], BUS_DB[23], BMUX_DB[23]);
  _MUX mdB24 (TENB, TDB[24], BUS_DB[24], BMUX_DB[24]);
  _MUX mdB25 (TENB, TDB[25], BUS_DB[25], BMUX_DB[25]);
  _MUX mdB26 (TENB, TDB[26], BUS_DB[26], BMUX_DB[26]);
  _MUX mdB27 (TENB, TDB[27], BUS_DB[27], BMUX_DB[27]);
  _MUX mdB28 (TENB, TDB[28], BUS_DB[28], BMUX_DB[28]);
  _MUX mdB29 (TENB, TDB[29], BUS_DB[29], BMUX_DB[29]);
  _MUX mdB30 (TENB, TDB[30], BUS_DB[30], BMUX_DB[30]);
  _MUX mdB31 (TENB, TDB[31], BUS_DB[31], BMUX_DB[31]);
  _MUX mdB32 (TENB, TDB[32], BUS_DB[32], BMUX_DB[32]);
  _MUX mdB33 (TENB, TDB[33], BUS_DB[33], BMUX_DB[33]);
  _MUX mdB34 (TENB, TDB[34], BUS_DB[34], BMUX_DB[34]);
  _MUX mdB35 (TENB, TDB[35], BUS_DB[35], BMUX_DB[35]);
  _MUX mdB36 (TENB, TDB[36], BUS_DB[36], BMUX_DB[36]);
  _MUX mdB37 (TENB, TDB[37], BUS_DB[37], BMUX_DB[37]);
  _MUX mdB38 (TENB, TDB[38], BUS_DB[38], BMUX_DB[38]);
  _MUX mdB39 (TENB, TDB[39], BUS_DB[39], BMUX_DB[39]);
  _MUX mdB40 (TENB, TDB[40], BUS_DB[40], BMUX_DB[40]);
  _MUX mdB41 (TENB, TDB[41], BUS_DB[41], BMUX_DB[41]);
  _MUX mdB42 (TENB, TDB[42], BUS_DB[42], BMUX_DB[42]);
  _MUX mdB43 (TENB, TDB[43], BUS_DB[43], BMUX_DB[43]);
  _MUX mdB44 (TENB, TDB[44], BUS_DB[44], BMUX_DB[44]);
  _MUX mdB45 (TENB, TDB[45], BUS_DB[45], BMUX_DB[45]);
  _MUX mdB46 (TENB, TDB[46], BUS_DB[46], BMUX_DB[46]);
  _MUX mdB47 (TENB, TDB[47], BUS_DB[47], BMUX_DB[47]);
  _MUX mdB48 (TENB, TDB[48], BUS_DB[48], BMUX_DB[48]);
  _MUX mdB49 (TENB, TDB[49], BUS_DB[49], BMUX_DB[49]);
  _MUX mdB50 (TENB, TDB[50], BUS_DB[50], BMUX_DB[50]);
  _MUX mdB51 (TENB, TDB[51], BUS_DB[51], BMUX_DB[51]);
  _MUX mdB52 (TENB, TDB[52], BUS_DB[52], BMUX_DB[52]);
  _MUX mdB53 (TENB, TDB[53], BUS_DB[53], BMUX_DB[53]);
  _MUX mdB54 (TENB, TDB[54], BUS_DB[54], BMUX_DB[54]);
  _MUX mdB55 (TENB, TDB[55], BUS_DB[55], BMUX_DB[55]);
  _MUX mdB56 (TENB, TDB[56], BUS_DB[56], BMUX_DB[56]);
  _MUX mdB57 (TENB, TDB[57], BUS_DB[57], BMUX_DB[57]);
  _MUX mdB58 (TENB, TDB[58], BUS_DB[58], BMUX_DB[58]);
  _MUX mdB59 (TENB, TDB[59], BUS_DB[59], BMUX_DB[59]);
  _MUX mdB60 (TENB, TDB[60], BUS_DB[60], BMUX_DB[60]);
  _MUX mdB61 (TENB, TDB[61], BUS_DB[61], BMUX_DB[61]);
  _MUX mdB62 (TENB, TDB[62], BUS_DB[62], BMUX_DB[62]);
  _MUX mdB63 (TENB, TDB[63], BUS_DB[63], BMUX_DB[63]);

  _MUX mwenB (TENB, TWENB, BUS_WENB, BMUX_WENB);
  _MUX mwenselB (DFTRAMBYP, 1'b0, BMUX_WENB, BMUXSEL_WENB);
  buf bufmwenB (WENYB, BMUXSEL_WENB);

  _MUX mcenB    (TENB, TCENB, CENB, BMUX_CENB); 
  _MUX mcenselB    (DFTRAMBYP, 1'b0,BMUX_CENB, BMUXSEL_CENB); 
  buf bufmcenB (CENYB, BMUXSEL_CENB);
   wire [7:0] B_max, B_max_n, AB_m;
   wire XoutBif, XoutBiff;
   wire [7:1] BMUX_AB_n, EQ_B, m_AB;
   wire [6:0] XoutBi;
  not BMUX_AB1_n (BMUX_AB_n[1], BMUX_AB[1]);
  not BMUX_AB2_n (BMUX_AB_n[2], BMUX_AB[2]);
  not BMUX_AB3_n (BMUX_AB_n[3], BMUX_AB[3]);
  not BMUX_AB4_n (BMUX_AB_n[4], BMUX_AB[4]);
  not BMUX_AB5_n (BMUX_AB_n[5], BMUX_AB[5]);
  not BMUX_AB6_n (BMUX_AB_n[6], BMUX_AB[6]);
  not BMUX_AB7_n (BMUX_AB_n[7], BMUX_AB[7]);

  assign B_max[0] = 1;
  assign B_max[1] = 1;
  assign B_max[2] = 1;
  assign B_max[3] = 1;
  assign B_max[4] = 1;
  assign B_max[5] = 1;
  assign B_max[6] = 1;
  assign B_max[7] = 1;

  not Bmax0_n (B_max_n[0], B_max[0]);
  not Bmax1_n (B_max_n[1], B_max[1]);
  not Bmax2_n (B_max_n[2], B_max[2]);
  not Bmax3_n (B_max_n[3], B_max[3]);
  not Bmax4_n (B_max_n[4], B_max[4]);
  not Bmax5_n (B_max_n[5], B_max[5]);
  not Bmax6_n (B_max_n[6], B_max[6]);
  not Bmax7_n (B_max_n[7], B_max[7]);

  and andBMUXABAmax0 (AB_m[0], BMUX_AB[0], B_max_n[0]);
  and andBMUXABAmax1 (AB_m[1], BMUX_AB[1], B_max_n[1]);
  and andBMUXABAmax2 (AB_m[2], BMUX_AB[2], B_max_n[2]);
  and andBMUXABAmax3 (AB_m[3], BMUX_AB[3], B_max_n[3]);
  and andBMUXABAmax4 (AB_m[4], BMUX_AB[4], B_max_n[4]);
  and andBMUXABAmax5 (AB_m[5], BMUX_AB[5], B_max_n[5]);
  and andBMUXABAmax6 (AB_m[6], BMUX_AB[6], B_max_n[6]);
  and andBMUXABAmax7 (AB_m[7], BMUX_AB[7], B_max_n[7]);

  and andBMUXABAmax1_n (m_AB[1], BMUX_AB_n[1], B_max[1]);
  and andBMUXABAmax2_n (m_AB[2], BMUX_AB_n[2], B_max[2]);
  and andBMUXABAmax3_n (m_AB[3], BMUX_AB_n[3], B_max[3]);
  and andBMUXABAmax4_n (m_AB[4], BMUX_AB_n[4], B_max[4]);
  and andBMUXABAmax5_n (m_AB[5], BMUX_AB_n[5], B_max[5]);
  and andBMUXABAmax6_n (m_AB[6], BMUX_AB_n[6], B_max[6]);
  and andBMUXABAmax7_n (m_AB[7], BMUX_AB_n[7], B_max[7]);

  nor norABAmax1 (EQ_B[1], m_AB[1], AB_m[1]);
  nor norABAmax2 (EQ_B[2], m_AB[2], AB_m[2]);
  nor norABAmax3 (EQ_B[3], m_AB[3], AB_m[3]);
  nor norABAmax4 (EQ_B[4], m_AB[4], AB_m[4]);
  nor norABAmax5 (EQ_B[5], m_AB[5], AB_m[5]);
  nor norABAmax6 (EQ_B[6], m_AB[6], AB_m[6]);
  nor norABAmax7 (EQ_B[7], m_AB[7], AB_m[7]);

  and XfABAmax0 (XoutBi[0], AB_m[0], EQ_B[7], EQ_B[6], EQ_B[5], EQ_B[4], EQ_B[3], EQ_B[2], EQ_B[1]);
  and XfABAmax1 (XoutBi[1], AB_m[1], EQ_B[7], EQ_B[6], EQ_B[5], EQ_B[4], EQ_B[3], EQ_B[2]);
  and XfABAmax2 (XoutBi[2], AB_m[2], EQ_B[7], EQ_B[6], EQ_B[5], EQ_B[4], EQ_B[3]);
  and XfABAmax3 (XoutBi[3], AB_m[3], EQ_B[7], EQ_B[6], EQ_B[5], EQ_B[4]);
  and XfABAmax4 (XoutBi[4], AB_m[4], EQ_B[7], EQ_B[6], EQ_B[5]);
  and XfABAmax5 (XoutBi[5], AB_m[5], EQ_B[7], EQ_B[6]);
  and XfABAmax6 (XoutBi[6], AB_m[6], EQ_B[7]);
  or orXfABAmax7 (XoutBif, AB_m[7], XoutBi[0], XoutBi[1], XoutBi[2], XoutBi[3], XoutBi[4], XoutBi[5], XoutBi[6]);

  wire [7:0] xDetectionAddrBusB;
   xor addrHandleB0 (xDetectionAddrBusB[0], BMUX_AB[0], BMUX_AB[0]);
   xor addrHandleB1 (xDetectionAddrBusB[1], BMUX_AB[1], BMUX_AB[1]);
   xor addrHandleB2 (xDetectionAddrBusB[2], BMUX_AB[2], BMUX_AB[2]);
   xor addrHandleB3 (xDetectionAddrBusB[3], BMUX_AB[3], BMUX_AB[3]);
   xor addrHandleB4 (xDetectionAddrBusB[4], BMUX_AB[4], BMUX_AB[4]);
   xor addrHandleB5 (xDetectionAddrBusB[5], BMUX_AB[5], BMUX_AB[5]);
   xor addrHandleB6 (xDetectionAddrBusB[6], BMUX_AB[6], BMUX_AB[6]);
   xor addrHandleB7 (xDetectionAddrBusB[7], BMUX_AB[7], BMUX_AB[7]);
   or addrFinalB (xAddrB,xDetectionAddrBusB[0],xDetectionAddrBusB[1],xDetectionAddrBusB[2],xDetectionAddrBusB[3],xDetectionAddrBusB[4],xDetectionAddrBusB[5],xDetectionAddrBusB[6],xDetectionAddrBusB[7]);
   or xBoundB (XoutBFinal, XoutBif, xAddrB);
  nor scanshiftB (nscanshiftB, DFTRAMBYP, SEB);
  and XoutaddrB (XoutaddrB, nscanshiftB, XoutBFinal);
  or XoutBFF0 (XoutBiff, XoutaddrB, XoutB);

  wire [63:0] SPLIT_WENB;
   assign SPLIT_WENB[0] =BMUX_WENB;
   assign SPLIT_WENB[1] =BMUX_WENB;
   assign SPLIT_WENB[2] =BMUX_WENB;
   assign SPLIT_WENB[3] =BMUX_WENB;
   assign SPLIT_WENB[4] =BMUX_WENB;
   assign SPLIT_WENB[5] =BMUX_WENB;
   assign SPLIT_WENB[6] =BMUX_WENB;
   assign SPLIT_WENB[7] =BMUX_WENB;
   assign SPLIT_WENB[8] =BMUX_WENB;
   assign SPLIT_WENB[9] =BMUX_WENB;
   assign SPLIT_WENB[10] =BMUX_WENB;
   assign SPLIT_WENB[11] =BMUX_WENB;
   assign SPLIT_WENB[12] =BMUX_WENB;
   assign SPLIT_WENB[13] =BMUX_WENB;
   assign SPLIT_WENB[14] =BMUX_WENB;
   assign SPLIT_WENB[15] =BMUX_WENB;
   assign SPLIT_WENB[16] =BMUX_WENB;
   assign SPLIT_WENB[17] =BMUX_WENB;
   assign SPLIT_WENB[18] =BMUX_WENB;
   assign SPLIT_WENB[19] =BMUX_WENB;
   assign SPLIT_WENB[20] =BMUX_WENB;
   assign SPLIT_WENB[21] =BMUX_WENB;
   assign SPLIT_WENB[22] =BMUX_WENB;
   assign SPLIT_WENB[23] =BMUX_WENB;
   assign SPLIT_WENB[24] =BMUX_WENB;
   assign SPLIT_WENB[25] =BMUX_WENB;
   assign SPLIT_WENB[26] =BMUX_WENB;
   assign SPLIT_WENB[27] =BMUX_WENB;
   assign SPLIT_WENB[28] =BMUX_WENB;
   assign SPLIT_WENB[29] =BMUX_WENB;
   assign SPLIT_WENB[30] =BMUX_WENB;
   assign SPLIT_WENB[31] =BMUX_WENB;
   assign SPLIT_WENB[32] =BMUX_WENB;
   assign SPLIT_WENB[33] =BMUX_WENB;
   assign SPLIT_WENB[34] =BMUX_WENB;
   assign SPLIT_WENB[35] =BMUX_WENB;
   assign SPLIT_WENB[36] =BMUX_WENB;
   assign SPLIT_WENB[37] =BMUX_WENB;
   assign SPLIT_WENB[38] =BMUX_WENB;
   assign SPLIT_WENB[39] =BMUX_WENB;
   assign SPLIT_WENB[40] =BMUX_WENB;
   assign SPLIT_WENB[41] =BMUX_WENB;
   assign SPLIT_WENB[42] =BMUX_WENB;
   assign SPLIT_WENB[43] =BMUX_WENB;
   assign SPLIT_WENB[44] =BMUX_WENB;
   assign SPLIT_WENB[45] =BMUX_WENB;
   assign SPLIT_WENB[46] =BMUX_WENB;
   assign SPLIT_WENB[47] =BMUX_WENB;
   assign SPLIT_WENB[48] =BMUX_WENB;
   assign SPLIT_WENB[49] =BMUX_WENB;
   assign SPLIT_WENB[50] =BMUX_WENB;
   assign SPLIT_WENB[51] =BMUX_WENB;
   assign SPLIT_WENB[52] =BMUX_WENB;
   assign SPLIT_WENB[53] =BMUX_WENB;
   assign SPLIT_WENB[54] =BMUX_WENB;
   assign SPLIT_WENB[55] =BMUX_WENB;
   assign SPLIT_WENB[56] =BMUX_WENB;
   assign SPLIT_WENB[57] =BMUX_WENB;
   assign SPLIT_WENB[58] =BMUX_WENB;
   assign SPLIT_WENB[59] =BMUX_WENB;
   assign SPLIT_WENB[60] =BMUX_WENB;
   assign SPLIT_WENB[61] =BMUX_WENB;
   assign SPLIT_WENB[62] =BMUX_WENB;
   assign SPLIT_WENB[63] =BMUX_WENB;
   wire NOT_CENB;
   not (NOT_CENB, BMUX_CENB);
   wire NOT_DFTRAMBYP;
   not (NOT_DFTRAMBYP, DFTRAMBYP);
   wire [63:0] WRITEB;
   wire [63: 0] NOT_SPLIT_WENB;
   not (NOT_SPLIT_WENB[0], SPLIT_WENB[0]);
   not (NOT_SPLIT_WENB[1], SPLIT_WENB[1]);
   not (NOT_SPLIT_WENB[2], SPLIT_WENB[2]);
   not (NOT_SPLIT_WENB[3], SPLIT_WENB[3]);
   not (NOT_SPLIT_WENB[4], SPLIT_WENB[4]);
   not (NOT_SPLIT_WENB[5], SPLIT_WENB[5]);
   not (NOT_SPLIT_WENB[6], SPLIT_WENB[6]);
   not (NOT_SPLIT_WENB[7], SPLIT_WENB[7]);
   not (NOT_SPLIT_WENB[8], SPLIT_WENB[8]);
   not (NOT_SPLIT_WENB[9], SPLIT_WENB[9]);
   not (NOT_SPLIT_WENB[10], SPLIT_WENB[10]);
   not (NOT_SPLIT_WENB[11], SPLIT_WENB[11]);
   not (NOT_SPLIT_WENB[12], SPLIT_WENB[12]);
   not (NOT_SPLIT_WENB[13], SPLIT_WENB[13]);
   not (NOT_SPLIT_WENB[14], SPLIT_WENB[14]);
   not (NOT_SPLIT_WENB[15], SPLIT_WENB[15]);
   not (NOT_SPLIT_WENB[16], SPLIT_WENB[16]);
   not (NOT_SPLIT_WENB[17], SPLIT_WENB[17]);
   not (NOT_SPLIT_WENB[18], SPLIT_WENB[18]);
   not (NOT_SPLIT_WENB[19], SPLIT_WENB[19]);
   not (NOT_SPLIT_WENB[20], SPLIT_WENB[20]);
   not (NOT_SPLIT_WENB[21], SPLIT_WENB[21]);
   not (NOT_SPLIT_WENB[22], SPLIT_WENB[22]);
   not (NOT_SPLIT_WENB[23], SPLIT_WENB[23]);
   not (NOT_SPLIT_WENB[24], SPLIT_WENB[24]);
   not (NOT_SPLIT_WENB[25], SPLIT_WENB[25]);
   not (NOT_SPLIT_WENB[26], SPLIT_WENB[26]);
   not (NOT_SPLIT_WENB[27], SPLIT_WENB[27]);
   not (NOT_SPLIT_WENB[28], SPLIT_WENB[28]);
   not (NOT_SPLIT_WENB[29], SPLIT_WENB[29]);
   not (NOT_SPLIT_WENB[30], SPLIT_WENB[30]);
   not (NOT_SPLIT_WENB[31], SPLIT_WENB[31]);
   not (NOT_SPLIT_WENB[32], SPLIT_WENB[32]);
   not (NOT_SPLIT_WENB[33], SPLIT_WENB[33]);
   not (NOT_SPLIT_WENB[34], SPLIT_WENB[34]);
   not (NOT_SPLIT_WENB[35], SPLIT_WENB[35]);
   not (NOT_SPLIT_WENB[36], SPLIT_WENB[36]);
   not (NOT_SPLIT_WENB[37], SPLIT_WENB[37]);
   not (NOT_SPLIT_WENB[38], SPLIT_WENB[38]);
   not (NOT_SPLIT_WENB[39], SPLIT_WENB[39]);
   not (NOT_SPLIT_WENB[40], SPLIT_WENB[40]);
   not (NOT_SPLIT_WENB[41], SPLIT_WENB[41]);
   not (NOT_SPLIT_WENB[42], SPLIT_WENB[42]);
   not (NOT_SPLIT_WENB[43], SPLIT_WENB[43]);
   not (NOT_SPLIT_WENB[44], SPLIT_WENB[44]);
   not (NOT_SPLIT_WENB[45], SPLIT_WENB[45]);
   not (NOT_SPLIT_WENB[46], SPLIT_WENB[46]);
   not (NOT_SPLIT_WENB[47], SPLIT_WENB[47]);
   not (NOT_SPLIT_WENB[48], SPLIT_WENB[48]);
   not (NOT_SPLIT_WENB[49], SPLIT_WENB[49]);
   not (NOT_SPLIT_WENB[50], SPLIT_WENB[50]);
   not (NOT_SPLIT_WENB[51], SPLIT_WENB[51]);
   not (NOT_SPLIT_WENB[52], SPLIT_WENB[52]);
   not (NOT_SPLIT_WENB[53], SPLIT_WENB[53]);
   not (NOT_SPLIT_WENB[54], SPLIT_WENB[54]);
   not (NOT_SPLIT_WENB[55], SPLIT_WENB[55]);
   not (NOT_SPLIT_WENB[56], SPLIT_WENB[56]);
   not (NOT_SPLIT_WENB[57], SPLIT_WENB[57]);
   not (NOT_SPLIT_WENB[58], SPLIT_WENB[58]);
   not (NOT_SPLIT_WENB[59], SPLIT_WENB[59]);
   not (NOT_SPLIT_WENB[60], SPLIT_WENB[60]);
   not (NOT_SPLIT_WENB[61], SPLIT_WENB[61]);
   not (NOT_SPLIT_WENB[62], SPLIT_WENB[62]);
   not (NOT_SPLIT_WENB[63], SPLIT_WENB[63]);
   and (WRITEB[0], NOT_DFTRAMBYP, NOT_SPLIT_WENB[0], NOT_CENB);
   and (WRITEB[1], NOT_DFTRAMBYP, NOT_SPLIT_WENB[1], NOT_CENB);
   and (WRITEB[2], NOT_DFTRAMBYP, NOT_SPLIT_WENB[2], NOT_CENB);
   and (WRITEB[3], NOT_DFTRAMBYP, NOT_SPLIT_WENB[3], NOT_CENB);
   and (WRITEB[4], NOT_DFTRAMBYP, NOT_SPLIT_WENB[4], NOT_CENB);
   and (WRITEB[5], NOT_DFTRAMBYP, NOT_SPLIT_WENB[5], NOT_CENB);
   and (WRITEB[6], NOT_DFTRAMBYP, NOT_SPLIT_WENB[6], NOT_CENB);
   and (WRITEB[7], NOT_DFTRAMBYP, NOT_SPLIT_WENB[7], NOT_CENB);
   and (WRITEB[8], NOT_DFTRAMBYP, NOT_SPLIT_WENB[8], NOT_CENB);
   and (WRITEB[9], NOT_DFTRAMBYP, NOT_SPLIT_WENB[9], NOT_CENB);
   and (WRITEB[10], NOT_DFTRAMBYP, NOT_SPLIT_WENB[10], NOT_CENB);
   and (WRITEB[11], NOT_DFTRAMBYP, NOT_SPLIT_WENB[11], NOT_CENB);
   and (WRITEB[12], NOT_DFTRAMBYP, NOT_SPLIT_WENB[12], NOT_CENB);
   and (WRITEB[13], NOT_DFTRAMBYP, NOT_SPLIT_WENB[13], NOT_CENB);
   and (WRITEB[14], NOT_DFTRAMBYP, NOT_SPLIT_WENB[14], NOT_CENB);
   and (WRITEB[15], NOT_DFTRAMBYP, NOT_SPLIT_WENB[15], NOT_CENB);
   and (WRITEB[16], NOT_DFTRAMBYP, NOT_SPLIT_WENB[16], NOT_CENB);
   and (WRITEB[17], NOT_DFTRAMBYP, NOT_SPLIT_WENB[17], NOT_CENB);
   and (WRITEB[18], NOT_DFTRAMBYP, NOT_SPLIT_WENB[18], NOT_CENB);
   and (WRITEB[19], NOT_DFTRAMBYP, NOT_SPLIT_WENB[19], NOT_CENB);
   and (WRITEB[20], NOT_DFTRAMBYP, NOT_SPLIT_WENB[20], NOT_CENB);
   and (WRITEB[21], NOT_DFTRAMBYP, NOT_SPLIT_WENB[21], NOT_CENB);
   and (WRITEB[22], NOT_DFTRAMBYP, NOT_SPLIT_WENB[22], NOT_CENB);
   and (WRITEB[23], NOT_DFTRAMBYP, NOT_SPLIT_WENB[23], NOT_CENB);
   and (WRITEB[24], NOT_DFTRAMBYP, NOT_SPLIT_WENB[24], NOT_CENB);
   and (WRITEB[25], NOT_DFTRAMBYP, NOT_SPLIT_WENB[25], NOT_CENB);
   and (WRITEB[26], NOT_DFTRAMBYP, NOT_SPLIT_WENB[26], NOT_CENB);
   and (WRITEB[27], NOT_DFTRAMBYP, NOT_SPLIT_WENB[27], NOT_CENB);
   and (WRITEB[28], NOT_DFTRAMBYP, NOT_SPLIT_WENB[28], NOT_CENB);
   and (WRITEB[29], NOT_DFTRAMBYP, NOT_SPLIT_WENB[29], NOT_CENB);
   and (WRITEB[30], NOT_DFTRAMBYP, NOT_SPLIT_WENB[30], NOT_CENB);
   and (WRITEB[31], NOT_DFTRAMBYP, NOT_SPLIT_WENB[31], NOT_CENB);
   and (WRITEB[32], NOT_DFTRAMBYP, NOT_SPLIT_WENB[32], NOT_CENB);
   and (WRITEB[33], NOT_DFTRAMBYP, NOT_SPLIT_WENB[33], NOT_CENB);
   and (WRITEB[34], NOT_DFTRAMBYP, NOT_SPLIT_WENB[34], NOT_CENB);
   and (WRITEB[35], NOT_DFTRAMBYP, NOT_SPLIT_WENB[35], NOT_CENB);
   and (WRITEB[36], NOT_DFTRAMBYP, NOT_SPLIT_WENB[36], NOT_CENB);
   and (WRITEB[37], NOT_DFTRAMBYP, NOT_SPLIT_WENB[37], NOT_CENB);
   and (WRITEB[38], NOT_DFTRAMBYP, NOT_SPLIT_WENB[38], NOT_CENB);
   and (WRITEB[39], NOT_DFTRAMBYP, NOT_SPLIT_WENB[39], NOT_CENB);
   and (WRITEB[40], NOT_DFTRAMBYP, NOT_SPLIT_WENB[40], NOT_CENB);
   and (WRITEB[41], NOT_DFTRAMBYP, NOT_SPLIT_WENB[41], NOT_CENB);
   and (WRITEB[42], NOT_DFTRAMBYP, NOT_SPLIT_WENB[42], NOT_CENB);
   and (WRITEB[43], NOT_DFTRAMBYP, NOT_SPLIT_WENB[43], NOT_CENB);
   and (WRITEB[44], NOT_DFTRAMBYP, NOT_SPLIT_WENB[44], NOT_CENB);
   and (WRITEB[45], NOT_DFTRAMBYP, NOT_SPLIT_WENB[45], NOT_CENB);
   and (WRITEB[46], NOT_DFTRAMBYP, NOT_SPLIT_WENB[46], NOT_CENB);
   and (WRITEB[47], NOT_DFTRAMBYP, NOT_SPLIT_WENB[47], NOT_CENB);
   and (WRITEB[48], NOT_DFTRAMBYP, NOT_SPLIT_WENB[48], NOT_CENB);
   and (WRITEB[49], NOT_DFTRAMBYP, NOT_SPLIT_WENB[49], NOT_CENB);
   and (WRITEB[50], NOT_DFTRAMBYP, NOT_SPLIT_WENB[50], NOT_CENB);
   and (WRITEB[51], NOT_DFTRAMBYP, NOT_SPLIT_WENB[51], NOT_CENB);
   and (WRITEB[52], NOT_DFTRAMBYP, NOT_SPLIT_WENB[52], NOT_CENB);
   and (WRITEB[53], NOT_DFTRAMBYP, NOT_SPLIT_WENB[53], NOT_CENB);
   and (WRITEB[54], NOT_DFTRAMBYP, NOT_SPLIT_WENB[54], NOT_CENB);
   and (WRITEB[55], NOT_DFTRAMBYP, NOT_SPLIT_WENB[55], NOT_CENB);
   and (WRITEB[56], NOT_DFTRAMBYP, NOT_SPLIT_WENB[56], NOT_CENB);
   and (WRITEB[57], NOT_DFTRAMBYP, NOT_SPLIT_WENB[57], NOT_CENB);
   and (WRITEB[58], NOT_DFTRAMBYP, NOT_SPLIT_WENB[58], NOT_CENB);
   and (WRITEB[59], NOT_DFTRAMBYP, NOT_SPLIT_WENB[59], NOT_CENB);
   and (WRITEB[60], NOT_DFTRAMBYP, NOT_SPLIT_WENB[60], NOT_CENB);
   and (WRITEB[61], NOT_DFTRAMBYP, NOT_SPLIT_WENB[61], NOT_CENB);
   and (WRITEB[62], NOT_DFTRAMBYP, NOT_SPLIT_WENB[62], NOT_CENB);
   and (WRITEB[63], NOT_DFTRAMBYP, NOT_SPLIT_WENB[63], NOT_CENB);
   wire [63:0] READB;
   and (READB[0], NOT_CENB, SPLIT_WENB[0]);
   and (READB[1], NOT_CENB, SPLIT_WENB[1]);
   and (READB[2], NOT_CENB, SPLIT_WENB[2]);
   and (READB[3], NOT_CENB, SPLIT_WENB[3]);
   and (READB[4], NOT_CENB, SPLIT_WENB[4]);
   and (READB[5], NOT_CENB, SPLIT_WENB[5]);
   and (READB[6], NOT_CENB, SPLIT_WENB[6]);
   and (READB[7], NOT_CENB, SPLIT_WENB[7]);
   and (READB[8], NOT_CENB, SPLIT_WENB[8]);
   and (READB[9], NOT_CENB, SPLIT_WENB[9]);
   and (READB[10], NOT_CENB, SPLIT_WENB[10]);
   and (READB[11], NOT_CENB, SPLIT_WENB[11]);
   and (READB[12], NOT_CENB, SPLIT_WENB[12]);
   and (READB[13], NOT_CENB, SPLIT_WENB[13]);
   and (READB[14], NOT_CENB, SPLIT_WENB[14]);
   and (READB[15], NOT_CENB, SPLIT_WENB[15]);
   and (READB[16], NOT_CENB, SPLIT_WENB[16]);
   and (READB[17], NOT_CENB, SPLIT_WENB[17]);
   and (READB[18], NOT_CENB, SPLIT_WENB[18]);
   and (READB[19], NOT_CENB, SPLIT_WENB[19]);
   and (READB[20], NOT_CENB, SPLIT_WENB[20]);
   and (READB[21], NOT_CENB, SPLIT_WENB[21]);
   and (READB[22], NOT_CENB, SPLIT_WENB[22]);
   and (READB[23], NOT_CENB, SPLIT_WENB[23]);
   and (READB[24], NOT_CENB, SPLIT_WENB[24]);
   and (READB[25], NOT_CENB, SPLIT_WENB[25]);
   and (READB[26], NOT_CENB, SPLIT_WENB[26]);
   and (READB[27], NOT_CENB, SPLIT_WENB[27]);
   and (READB[28], NOT_CENB, SPLIT_WENB[28]);
   and (READB[29], NOT_CENB, SPLIT_WENB[29]);
   and (READB[30], NOT_CENB, SPLIT_WENB[30]);
   and (READB[31], NOT_CENB, SPLIT_WENB[31]);
   and (READB[32], NOT_CENB, SPLIT_WENB[32]);
   and (READB[33], NOT_CENB, SPLIT_WENB[33]);
   and (READB[34], NOT_CENB, SPLIT_WENB[34]);
   and (READB[35], NOT_CENB, SPLIT_WENB[35]);
   and (READB[36], NOT_CENB, SPLIT_WENB[36]);
   and (READB[37], NOT_CENB, SPLIT_WENB[37]);
   and (READB[38], NOT_CENB, SPLIT_WENB[38]);
   and (READB[39], NOT_CENB, SPLIT_WENB[39]);
   and (READB[40], NOT_CENB, SPLIT_WENB[40]);
   and (READB[41], NOT_CENB, SPLIT_WENB[41]);
   and (READB[42], NOT_CENB, SPLIT_WENB[42]);
   and (READB[43], NOT_CENB, SPLIT_WENB[43]);
   and (READB[44], NOT_CENB, SPLIT_WENB[44]);
   and (READB[45], NOT_CENB, SPLIT_WENB[45]);
   and (READB[46], NOT_CENB, SPLIT_WENB[46]);
   and (READB[47], NOT_CENB, SPLIT_WENB[47]);
   and (READB[48], NOT_CENB, SPLIT_WENB[48]);
   and (READB[49], NOT_CENB, SPLIT_WENB[49]);
   and (READB[50], NOT_CENB, SPLIT_WENB[50]);
   and (READB[51], NOT_CENB, SPLIT_WENB[51]);
   and (READB[52], NOT_CENB, SPLIT_WENB[52]);
   and (READB[53], NOT_CENB, SPLIT_WENB[53]);
   and (READB[54], NOT_CENB, SPLIT_WENB[54]);
   and (READB[55], NOT_CENB, SPLIT_WENB[55]);
   and (READB[56], NOT_CENB, SPLIT_WENB[56]);
   and (READB[57], NOT_CENB, SPLIT_WENB[57]);
   and (READB[58], NOT_CENB, SPLIT_WENB[58]);
   and (READB[59], NOT_CENB, SPLIT_WENB[59]);
   and (READB[60], NOT_CENB, SPLIT_WENB[60]);
   and (READB[61], NOT_CENB, SPLIT_WENB[61]);
   and (READB[62], NOT_CENB, SPLIT_WENB[62]);
   and (READB[63], NOT_CENB, SPLIT_WENB[63]);
   SRAMdpw64d256_bitcell mem0 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[0]), .WRITEB(WRITEB[0]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[0]), .DB(BMUX_DB[0]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[0]), .QB(INT_QB[0]));
   SRAMdpw64d256_bitcell mem1 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[1]), .WRITEB(WRITEB[1]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[1]), .DB(BMUX_DB[1]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[1]), .QB(INT_QB[1]));
   SRAMdpw64d256_bitcell mem2 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[2]), .WRITEB(WRITEB[2]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[2]), .DB(BMUX_DB[2]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[2]), .QB(INT_QB[2]));
   SRAMdpw64d256_bitcell mem3 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[3]), .WRITEB(WRITEB[3]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[3]), .DB(BMUX_DB[3]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[3]), .QB(INT_QB[3]));
   SRAMdpw64d256_bitcell mem4 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[4]), .WRITEB(WRITEB[4]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[4]), .DB(BMUX_DB[4]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[4]), .QB(INT_QB[4]));
   SRAMdpw64d256_bitcell mem5 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[5]), .WRITEB(WRITEB[5]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[5]), .DB(BMUX_DB[5]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[5]), .QB(INT_QB[5]));
   SRAMdpw64d256_bitcell mem6 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[6]), .WRITEB(WRITEB[6]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[6]), .DB(BMUX_DB[6]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[6]), .QB(INT_QB[6]));
   SRAMdpw64d256_bitcell mem7 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[7]), .WRITEB(WRITEB[7]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[7]), .DB(BMUX_DB[7]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[7]), .QB(INT_QB[7]));
   SRAMdpw64d256_bitcell mem8 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[8]), .WRITEB(WRITEB[8]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[8]), .DB(BMUX_DB[8]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[8]), .QB(INT_QB[8]));
   SRAMdpw64d256_bitcell mem9 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[9]), .WRITEB(WRITEB[9]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[9]), .DB(BMUX_DB[9]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[9]), .QB(INT_QB[9]));
   SRAMdpw64d256_bitcell mem10 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[10]), .WRITEB(WRITEB[10]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[10]), .DB(BMUX_DB[10]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[10]), .QB(INT_QB[10]));
   SRAMdpw64d256_bitcell mem11 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[11]), .WRITEB(WRITEB[11]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[11]), .DB(BMUX_DB[11]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[11]), .QB(INT_QB[11]));
   SRAMdpw64d256_bitcell mem12 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[12]), .WRITEB(WRITEB[12]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[12]), .DB(BMUX_DB[12]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[12]), .QB(INT_QB[12]));
   SRAMdpw64d256_bitcell mem13 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[13]), .WRITEB(WRITEB[13]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[13]), .DB(BMUX_DB[13]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[13]), .QB(INT_QB[13]));
   SRAMdpw64d256_bitcell mem14 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[14]), .WRITEB(WRITEB[14]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[14]), .DB(BMUX_DB[14]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[14]), .QB(INT_QB[14]));
   SRAMdpw64d256_bitcell mem15 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[15]), .WRITEB(WRITEB[15]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[15]), .DB(BMUX_DB[15]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[15]), .QB(INT_QB[15]));
   SRAMdpw64d256_bitcell mem16 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[16]), .WRITEB(WRITEB[16]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[16]), .DB(BMUX_DB[16]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[16]), .QB(INT_QB[16]));
   SRAMdpw64d256_bitcell mem17 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[17]), .WRITEB(WRITEB[17]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[17]), .DB(BMUX_DB[17]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[17]), .QB(INT_QB[17]));
   SRAMdpw64d256_bitcell mem18 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[18]), .WRITEB(WRITEB[18]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[18]), .DB(BMUX_DB[18]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[18]), .QB(INT_QB[18]));
   SRAMdpw64d256_bitcell mem19 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[19]), .WRITEB(WRITEB[19]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[19]), .DB(BMUX_DB[19]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[19]), .QB(INT_QB[19]));
   SRAMdpw64d256_bitcell mem20 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[20]), .WRITEB(WRITEB[20]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[20]), .DB(BMUX_DB[20]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[20]), .QB(INT_QB[20]));
   SRAMdpw64d256_bitcell mem21 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[21]), .WRITEB(WRITEB[21]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[21]), .DB(BMUX_DB[21]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[21]), .QB(INT_QB[21]));
   SRAMdpw64d256_bitcell mem22 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[22]), .WRITEB(WRITEB[22]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[22]), .DB(BMUX_DB[22]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[22]), .QB(INT_QB[22]));
   SRAMdpw64d256_bitcell mem23 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[23]), .WRITEB(WRITEB[23]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[23]), .DB(BMUX_DB[23]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[23]), .QB(INT_QB[23]));
   SRAMdpw64d256_bitcell mem24 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[24]), .WRITEB(WRITEB[24]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[24]), .DB(BMUX_DB[24]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[24]), .QB(INT_QB[24]));
   SRAMdpw64d256_bitcell mem25 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[25]), .WRITEB(WRITEB[25]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[25]), .DB(BMUX_DB[25]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[25]), .QB(INT_QB[25]));
   SRAMdpw64d256_bitcell mem26 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[26]), .WRITEB(WRITEB[26]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[26]), .DB(BMUX_DB[26]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[26]), .QB(INT_QB[26]));
   SRAMdpw64d256_bitcell mem27 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[27]), .WRITEB(WRITEB[27]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[27]), .DB(BMUX_DB[27]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[27]), .QB(INT_QB[27]));
   SRAMdpw64d256_bitcell mem28 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[28]), .WRITEB(WRITEB[28]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[28]), .DB(BMUX_DB[28]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[28]), .QB(INT_QB[28]));
   SRAMdpw64d256_bitcell mem29 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[29]), .WRITEB(WRITEB[29]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[29]), .DB(BMUX_DB[29]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[29]), .QB(INT_QB[29]));
   SRAMdpw64d256_bitcell mem30 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[30]), .WRITEB(WRITEB[30]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[30]), .DB(BMUX_DB[30]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[30]), .QB(INT_QB[30]));
   SRAMdpw64d256_bitcell mem31 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[31]), .WRITEB(WRITEB[31]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[31]), .DB(BMUX_DB[31]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[31]), .QB(INT_QB[31]));
   SRAMdpw64d256_bitcell mem32 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[32]), .WRITEB(WRITEB[32]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[32]), .DB(BMUX_DB[32]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[32]), .QB(INT_QB[32]));
   SRAMdpw64d256_bitcell mem33 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[33]), .WRITEB(WRITEB[33]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[33]), .DB(BMUX_DB[33]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[33]), .QB(INT_QB[33]));
   SRAMdpw64d256_bitcell mem34 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[34]), .WRITEB(WRITEB[34]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[34]), .DB(BMUX_DB[34]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[34]), .QB(INT_QB[34]));
   SRAMdpw64d256_bitcell mem35 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[35]), .WRITEB(WRITEB[35]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[35]), .DB(BMUX_DB[35]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[35]), .QB(INT_QB[35]));
   SRAMdpw64d256_bitcell mem36 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[36]), .WRITEB(WRITEB[36]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[36]), .DB(BMUX_DB[36]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[36]), .QB(INT_QB[36]));
   SRAMdpw64d256_bitcell mem37 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[37]), .WRITEB(WRITEB[37]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[37]), .DB(BMUX_DB[37]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[37]), .QB(INT_QB[37]));
   SRAMdpw64d256_bitcell mem38 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[38]), .WRITEB(WRITEB[38]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[38]), .DB(BMUX_DB[38]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[38]), .QB(INT_QB[38]));
   SRAMdpw64d256_bitcell mem39 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[39]), .WRITEB(WRITEB[39]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[39]), .DB(BMUX_DB[39]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[39]), .QB(INT_QB[39]));
   SRAMdpw64d256_bitcell mem40 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[40]), .WRITEB(WRITEB[40]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[40]), .DB(BMUX_DB[40]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[40]), .QB(INT_QB[40]));
   SRAMdpw64d256_bitcell mem41 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[41]), .WRITEB(WRITEB[41]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[41]), .DB(BMUX_DB[41]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[41]), .QB(INT_QB[41]));
   SRAMdpw64d256_bitcell mem42 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[42]), .WRITEB(WRITEB[42]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[42]), .DB(BMUX_DB[42]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[42]), .QB(INT_QB[42]));
   SRAMdpw64d256_bitcell mem43 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[43]), .WRITEB(WRITEB[43]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[43]), .DB(BMUX_DB[43]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[43]), .QB(INT_QB[43]));
   SRAMdpw64d256_bitcell mem44 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[44]), .WRITEB(WRITEB[44]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[44]), .DB(BMUX_DB[44]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[44]), .QB(INT_QB[44]));
   SRAMdpw64d256_bitcell mem45 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[45]), .WRITEB(WRITEB[45]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[45]), .DB(BMUX_DB[45]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[45]), .QB(INT_QB[45]));
   SRAMdpw64d256_bitcell mem46 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[46]), .WRITEB(WRITEB[46]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[46]), .DB(BMUX_DB[46]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[46]), .QB(INT_QB[46]));
   SRAMdpw64d256_bitcell mem47 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[47]), .WRITEB(WRITEB[47]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[47]), .DB(BMUX_DB[47]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[47]), .QB(INT_QB[47]));
   SRAMdpw64d256_bitcell mem48 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[48]), .WRITEB(WRITEB[48]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[48]), .DB(BMUX_DB[48]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[48]), .QB(INT_QB[48]));
   SRAMdpw64d256_bitcell mem49 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[49]), .WRITEB(WRITEB[49]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[49]), .DB(BMUX_DB[49]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[49]), .QB(INT_QB[49]));
   SRAMdpw64d256_bitcell mem50 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[50]), .WRITEB(WRITEB[50]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[50]), .DB(BMUX_DB[50]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[50]), .QB(INT_QB[50]));
   SRAMdpw64d256_bitcell mem51 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[51]), .WRITEB(WRITEB[51]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[51]), .DB(BMUX_DB[51]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[51]), .QB(INT_QB[51]));
   SRAMdpw64d256_bitcell mem52 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[52]), .WRITEB(WRITEB[52]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[52]), .DB(BMUX_DB[52]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[52]), .QB(INT_QB[52]));
   SRAMdpw64d256_bitcell mem53 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[53]), .WRITEB(WRITEB[53]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[53]), .DB(BMUX_DB[53]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[53]), .QB(INT_QB[53]));
   SRAMdpw64d256_bitcell mem54 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[54]), .WRITEB(WRITEB[54]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[54]), .DB(BMUX_DB[54]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[54]), .QB(INT_QB[54]));
   SRAMdpw64d256_bitcell mem55 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[55]), .WRITEB(WRITEB[55]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[55]), .DB(BMUX_DB[55]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[55]), .QB(INT_QB[55]));
   SRAMdpw64d256_bitcell mem56 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[56]), .WRITEB(WRITEB[56]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[56]), .DB(BMUX_DB[56]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[56]), .QB(INT_QB[56]));
   SRAMdpw64d256_bitcell mem57 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[57]), .WRITEB(WRITEB[57]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[57]), .DB(BMUX_DB[57]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[57]), .QB(INT_QB[57]));
   SRAMdpw64d256_bitcell mem58 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[58]), .WRITEB(WRITEB[58]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[58]), .DB(BMUX_DB[58]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[58]), .QB(INT_QB[58]));
   SRAMdpw64d256_bitcell mem59 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[59]), .WRITEB(WRITEB[59]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[59]), .DB(BMUX_DB[59]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[59]), .QB(INT_QB[59]));
   SRAMdpw64d256_bitcell mem60 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[60]), .WRITEB(WRITEB[60]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[60]), .DB(BMUX_DB[60]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[60]), .QB(INT_QB[60]));
   SRAMdpw64d256_bitcell mem61 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[61]), .WRITEB(WRITEB[61]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[61]), .DB(BMUX_DB[61]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[61]), .QB(INT_QB[61]));
   SRAMdpw64d256_bitcell mem62 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[62]), .WRITEB(WRITEB[62]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[62]), .DB(BMUX_DB[62]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[62]), .QB(INT_QB[62]));
   SRAMdpw64d256_bitcell mem63 (.CLKA(CLKA), .CLKB(CLKB), .WRITEA(WRITEA[63]), .WRITEB(WRITEB[63]), .AA(BMUX_AA), .AB(BMUX_AB), .DA(BMUX_DA[63]), .DB(BMUX_DB[63]), .XoutA(XoutAiff), .XoutB(XoutBiff), .QA(INT_QA[63]), .QB(INT_QB[63]));
   xor (x_detection_CENB, BMUX_CENB, BMUX_CENB);
   and (acendftB, x_detection_CENB, NOT_DFTRAMBYP);
   assign XoutB = (SEB & ~DFTRAMBYP) | acendftB;
   _MUX reB0 (READB[0], QB[0], INT_QB[0], READ_QB[0]);
   _MUX reB1 (READB[1], QB[1], INT_QB[1], READ_QB[1]);
   _MUX reB2 (READB[2], QB[2], INT_QB[2], READ_QB[2]);
   _MUX reB3 (READB[3], QB[3], INT_QB[3], READ_QB[3]);
   _MUX reB4 (READB[4], QB[4], INT_QB[4], READ_QB[4]);
   _MUX reB5 (READB[5], QB[5], INT_QB[5], READ_QB[5]);
   _MUX reB6 (READB[6], QB[6], INT_QB[6], READ_QB[6]);
   _MUX reB7 (READB[7], QB[7], INT_QB[7], READ_QB[7]);
   _MUX reB8 (READB[8], QB[8], INT_QB[8], READ_QB[8]);
   _MUX reB9 (READB[9], QB[9], INT_QB[9], READ_QB[9]);
   _MUX reB10 (READB[10], QB[10], INT_QB[10], READ_QB[10]);
   _MUX reB11 (READB[11], QB[11], INT_QB[11], READ_QB[11]);
   _MUX reB12 (READB[12], QB[12], INT_QB[12], READ_QB[12]);
   _MUX reB13 (READB[13], QB[13], INT_QB[13], READ_QB[13]);
   _MUX reB14 (READB[14], QB[14], INT_QB[14], READ_QB[14]);
   _MUX reB15 (READB[15], QB[15], INT_QB[15], READ_QB[15]);
   _MUX reB16 (READB[16], QB[16], INT_QB[16], READ_QB[16]);
   _MUX reB17 (READB[17], QB[17], INT_QB[17], READ_QB[17]);
   _MUX reB18 (READB[18], QB[18], INT_QB[18], READ_QB[18]);
   _MUX reB19 (READB[19], QB[19], INT_QB[19], READ_QB[19]);
   _MUX reB20 (READB[20], QB[20], INT_QB[20], READ_QB[20]);
   _MUX reB21 (READB[21], QB[21], INT_QB[21], READ_QB[21]);
   _MUX reB22 (READB[22], QB[22], INT_QB[22], READ_QB[22]);
   _MUX reB23 (READB[23], QB[23], INT_QB[23], READ_QB[23]);
   _MUX reB24 (READB[24], QB[24], INT_QB[24], READ_QB[24]);
   _MUX reB25 (READB[25], QB[25], INT_QB[25], READ_QB[25]);
   _MUX reB26 (READB[26], QB[26], INT_QB[26], READ_QB[26]);
   _MUX reB27 (READB[27], QB[27], INT_QB[27], READ_QB[27]);
   _MUX reB28 (READB[28], QB[28], INT_QB[28], READ_QB[28]);
   _MUX reB29 (READB[29], QB[29], INT_QB[29], READ_QB[29]);
   _MUX reB30 (READB[30], QB[30], INT_QB[30], READ_QB[30]);
   _MUX reB31 (READB[31], QB[31], INT_QB[31], READ_QB[31]);
   _MUX reB32 (READB[32], QB[32], INT_QB[32], READ_QB[32]);
   _MUX reB33 (READB[33], QB[33], INT_QB[33], READ_QB[33]);
   _MUX reB34 (READB[34], QB[34], INT_QB[34], READ_QB[34]);
   _MUX reB35 (READB[35], QB[35], INT_QB[35], READ_QB[35]);
   _MUX reB36 (READB[36], QB[36], INT_QB[36], READ_QB[36]);
   _MUX reB37 (READB[37], QB[37], INT_QB[37], READ_QB[37]);
   _MUX reB38 (READB[38], QB[38], INT_QB[38], READ_QB[38]);
   _MUX reB39 (READB[39], QB[39], INT_QB[39], READ_QB[39]);
   _MUX reB40 (READB[40], QB[40], INT_QB[40], READ_QB[40]);
   _MUX reB41 (READB[41], QB[41], INT_QB[41], READ_QB[41]);
   _MUX reB42 (READB[42], QB[42], INT_QB[42], READ_QB[42]);
   _MUX reB43 (READB[43], QB[43], INT_QB[43], READ_QB[43]);
   _MUX reB44 (READB[44], QB[44], INT_QB[44], READ_QB[44]);
   _MUX reB45 (READB[45], QB[45], INT_QB[45], READ_QB[45]);
   _MUX reB46 (READB[46], QB[46], INT_QB[46], READ_QB[46]);
   _MUX reB47 (READB[47], QB[47], INT_QB[47], READ_QB[47]);
   _MUX reB48 (READB[48], QB[48], INT_QB[48], READ_QB[48]);
   _MUX reB49 (READB[49], QB[49], INT_QB[49], READ_QB[49]);
   _MUX reB50 (READB[50], QB[50], INT_QB[50], READ_QB[50]);
   _MUX reB51 (READB[51], QB[51], INT_QB[51], READ_QB[51]);
   _MUX reB52 (READB[52], QB[52], INT_QB[52], READ_QB[52]);
   _MUX reB53 (READB[53], QB[53], INT_QB[53], READ_QB[53]);
   _MUX reB54 (READB[54], QB[54], INT_QB[54], READ_QB[54]);
   _MUX reB55 (READB[55], QB[55], INT_QB[55], READ_QB[55]);
   _MUX reB56 (READB[56], QB[56], INT_QB[56], READ_QB[56]);
   _MUX reB57 (READB[57], QB[57], INT_QB[57], READ_QB[57]);
   _MUX reB58 (READB[58], QB[58], INT_QB[58], READ_QB[58]);
   _MUX reB59 (READB[59], QB[59], INT_QB[59], READ_QB[59]);
   _MUX reB60 (READB[60], QB[60], INT_QB[60], READ_QB[60]);
   _MUX reB61 (READB[61], QB[61], INT_QB[61], READ_QB[61]);
   _MUX reB62 (READB[62], QB[62], INT_QB[62], READ_QB[62]);
   _MUX reB63 (READB[63], QB[63], INT_QB[63], READ_QB[63]);
   wire [7:0] ABXOR;
   xor (ABXOR[0], BMUX_AB[0], BMUX_AB[0]);
   xor (ABXOR[1], BMUX_AB[1], BMUX_AB[1]);
   xor (ABXOR[2], BMUX_AB[2], BMUX_AB[2]);
   xor (ABXOR[3], BMUX_AB[3], BMUX_AB[3]);
   xor (ABXOR[4], BMUX_AB[4], BMUX_AB[4]);
   xor (ABXOR[5], BMUX_AB[5], BMUX_AB[5]);
   xor (ABXOR[6], BMUX_AB[6], BMUX_AB[6]);
   xor (ABXOR[7], BMUX_AB[7], BMUX_AB[7]);
   wire xB_addr;
   or (xB_addr, ABXOR[0], ABXOR[1], ABXOR[2], ABXOR[3], ABXOR[4], ABXOR[5], ABXOR[6], ABXOR[7]);
   _MUX rxB0 (xB_addr, READ_QB[0], 1'bX, READ_QBX[0]);
   _MUX rxB1 (xB_addr, READ_QB[1], 1'bX, READ_QBX[1]);
   _MUX rxB2 (xB_addr, READ_QB[2], 1'bX, READ_QBX[2]);
   _MUX rxB3 (xB_addr, READ_QB[3], 1'bX, READ_QBX[3]);
   _MUX rxB4 (xB_addr, READ_QB[4], 1'bX, READ_QBX[4]);
   _MUX rxB5 (xB_addr, READ_QB[5], 1'bX, READ_QBX[5]);
   _MUX rxB6 (xB_addr, READ_QB[6], 1'bX, READ_QBX[6]);
   _MUX rxB7 (xB_addr, READ_QB[7], 1'bX, READ_QBX[7]);
   _MUX rxB8 (xB_addr, READ_QB[8], 1'bX, READ_QBX[8]);
   _MUX rxB9 (xB_addr, READ_QB[9], 1'bX, READ_QBX[9]);
   _MUX rxB10 (xB_addr, READ_QB[10], 1'bX, READ_QBX[10]);
   _MUX rxB11 (xB_addr, READ_QB[11], 1'bX, READ_QBX[11]);
   _MUX rxB12 (xB_addr, READ_QB[12], 1'bX, READ_QBX[12]);
   _MUX rxB13 (xB_addr, READ_QB[13], 1'bX, READ_QBX[13]);
   _MUX rxB14 (xB_addr, READ_QB[14], 1'bX, READ_QBX[14]);
   _MUX rxB15 (xB_addr, READ_QB[15], 1'bX, READ_QBX[15]);
   _MUX rxB16 (xB_addr, READ_QB[16], 1'bX, READ_QBX[16]);
   _MUX rxB17 (xB_addr, READ_QB[17], 1'bX, READ_QBX[17]);
   _MUX rxB18 (xB_addr, READ_QB[18], 1'bX, READ_QBX[18]);
   _MUX rxB19 (xB_addr, READ_QB[19], 1'bX, READ_QBX[19]);
   _MUX rxB20 (xB_addr, READ_QB[20], 1'bX, READ_QBX[20]);
   _MUX rxB21 (xB_addr, READ_QB[21], 1'bX, READ_QBX[21]);
   _MUX rxB22 (xB_addr, READ_QB[22], 1'bX, READ_QBX[22]);
   _MUX rxB23 (xB_addr, READ_QB[23], 1'bX, READ_QBX[23]);
   _MUX rxB24 (xB_addr, READ_QB[24], 1'bX, READ_QBX[24]);
   _MUX rxB25 (xB_addr, READ_QB[25], 1'bX, READ_QBX[25]);
   _MUX rxB26 (xB_addr, READ_QB[26], 1'bX, READ_QBX[26]);
   _MUX rxB27 (xB_addr, READ_QB[27], 1'bX, READ_QBX[27]);
   _MUX rxB28 (xB_addr, READ_QB[28], 1'bX, READ_QBX[28]);
   _MUX rxB29 (xB_addr, READ_QB[29], 1'bX, READ_QBX[29]);
   _MUX rxB30 (xB_addr, READ_QB[30], 1'bX, READ_QBX[30]);
   _MUX rxB31 (xB_addr, READ_QB[31], 1'bX, READ_QBX[31]);
   _MUX rxB32 (xB_addr, READ_QB[32], 1'bX, READ_QBX[32]);
   _MUX rxB33 (xB_addr, READ_QB[33], 1'bX, READ_QBX[33]);
   _MUX rxB34 (xB_addr, READ_QB[34], 1'bX, READ_QBX[34]);
   _MUX rxB35 (xB_addr, READ_QB[35], 1'bX, READ_QBX[35]);
   _MUX rxB36 (xB_addr, READ_QB[36], 1'bX, READ_QBX[36]);
   _MUX rxB37 (xB_addr, READ_QB[37], 1'bX, READ_QBX[37]);
   _MUX rxB38 (xB_addr, READ_QB[38], 1'bX, READ_QBX[38]);
   _MUX rxB39 (xB_addr, READ_QB[39], 1'bX, READ_QBX[39]);
   _MUX rxB40 (xB_addr, READ_QB[40], 1'bX, READ_QBX[40]);
   _MUX rxB41 (xB_addr, READ_QB[41], 1'bX, READ_QBX[41]);
   _MUX rxB42 (xB_addr, READ_QB[42], 1'bX, READ_QBX[42]);
   _MUX rxB43 (xB_addr, READ_QB[43], 1'bX, READ_QBX[43]);
   _MUX rxB44 (xB_addr, READ_QB[44], 1'bX, READ_QBX[44]);
   _MUX rxB45 (xB_addr, READ_QB[45], 1'bX, READ_QBX[45]);
   _MUX rxB46 (xB_addr, READ_QB[46], 1'bX, READ_QBX[46]);
   _MUX rxB47 (xB_addr, READ_QB[47], 1'bX, READ_QBX[47]);
   _MUX rxB48 (xB_addr, READ_QB[48], 1'bX, READ_QBX[48]);
   _MUX rxB49 (xB_addr, READ_QB[49], 1'bX, READ_QBX[49]);
   _MUX rxB50 (xB_addr, READ_QB[50], 1'bX, READ_QBX[50]);
   _MUX rxB51 (xB_addr, READ_QB[51], 1'bX, READ_QBX[51]);
   _MUX rxB52 (xB_addr, READ_QB[52], 1'bX, READ_QBX[52]);
   _MUX rxB53 (xB_addr, READ_QB[53], 1'bX, READ_QBX[53]);
   _MUX rxB54 (xB_addr, READ_QB[54], 1'bX, READ_QBX[54]);
   _MUX rxB55 (xB_addr, READ_QB[55], 1'bX, READ_QBX[55]);
   _MUX rxB56 (xB_addr, READ_QB[56], 1'bX, READ_QBX[56]);
   _MUX rxB57 (xB_addr, READ_QB[57], 1'bX, READ_QBX[57]);
   _MUX rxB58 (xB_addr, READ_QB[58], 1'bX, READ_QBX[58]);
   _MUX rxB59 (xB_addr, READ_QB[59], 1'bX, READ_QBX[59]);
   _MUX rxB60 (xB_addr, READ_QB[60], 1'bX, READ_QBX[60]);
   _MUX rxB61 (xB_addr, READ_QB[61], 1'bX, READ_QBX[61]);
   _MUX rxB62 (xB_addr, READ_QB[62], 1'bX, READ_QBX[62]);
   _MUX rxB63 (xB_addr, READ_QB[63], 1'bX, READ_QBX[63]);
   _MUX mqB0 (DFTRAMBYP, READ_QBX[0], BMUX_DB[0], DB_scan[0]);
   _MUX mqB1 (DFTRAMBYP, READ_QBX[1], BMUX_DB[1], DB_scan[1]);
   _MUX mqB2 (DFTRAMBYP, READ_QBX[2], BMUX_DB[2], DB_scan[2]);
   _MUX mqB3 (DFTRAMBYP, READ_QBX[3], BMUX_DB[3], DB_scan[3]);
   _MUX mqB4 (DFTRAMBYP, READ_QBX[4], BMUX_DB[4], DB_scan[4]);
   _MUX mqB5 (DFTRAMBYP, READ_QBX[5], BMUX_DB[5], DB_scan[5]);
   _MUX mqB6 (DFTRAMBYP, READ_QBX[6], BMUX_DB[6], DB_scan[6]);
   _MUX mqB7 (DFTRAMBYP, READ_QBX[7], BMUX_DB[7], DB_scan[7]);
   _MUX mqB8 (DFTRAMBYP, READ_QBX[8], BMUX_DB[8], DB_scan[8]);
   _MUX mqB9 (DFTRAMBYP, READ_QBX[9], BMUX_DB[9], DB_scan[9]);
   _MUX mqB10 (DFTRAMBYP, READ_QBX[10], BMUX_DB[10], DB_scan[10]);
   _MUX mqB11 (DFTRAMBYP, READ_QBX[11], BMUX_DB[11], DB_scan[11]);
   _MUX mqB12 (DFTRAMBYP, READ_QBX[12], BMUX_DB[12], DB_scan[12]);
   _MUX mqB13 (DFTRAMBYP, READ_QBX[13], BMUX_DB[13], DB_scan[13]);
   _MUX mqB14 (DFTRAMBYP, READ_QBX[14], BMUX_DB[14], DB_scan[14]);
   _MUX mqB15 (DFTRAMBYP, READ_QBX[15], BMUX_DB[15], DB_scan[15]);
   _MUX mqB16 (DFTRAMBYP, READ_QBX[16], BMUX_DB[16], DB_scan[16]);
   _MUX mqB17 (DFTRAMBYP, READ_QBX[17], BMUX_DB[17], DB_scan[17]);
   _MUX mqB18 (DFTRAMBYP, READ_QBX[18], BMUX_DB[18], DB_scan[18]);
   _MUX mqB19 (DFTRAMBYP, READ_QBX[19], BMUX_DB[19], DB_scan[19]);
   _MUX mqB20 (DFTRAMBYP, READ_QBX[20], BMUX_DB[20], DB_scan[20]);
   _MUX mqB21 (DFTRAMBYP, READ_QBX[21], BMUX_DB[21], DB_scan[21]);
   _MUX mqB22 (DFTRAMBYP, READ_QBX[22], BMUX_DB[22], DB_scan[22]);
   _MUX mqB23 (DFTRAMBYP, READ_QBX[23], BMUX_DB[23], DB_scan[23]);
   _MUX mqB24 (DFTRAMBYP, READ_QBX[24], BMUX_DB[24], DB_scan[24]);
   _MUX mqB25 (DFTRAMBYP, READ_QBX[25], BMUX_DB[25], DB_scan[25]);
   _MUX mqB26 (DFTRAMBYP, READ_QBX[26], BMUX_DB[26], DB_scan[26]);
   _MUX mqB27 (DFTRAMBYP, READ_QBX[27], BMUX_DB[27], DB_scan[27]);
   _MUX mqB28 (DFTRAMBYP, READ_QBX[28], BMUX_DB[28], DB_scan[28]);
   _MUX mqB29 (DFTRAMBYP, READ_QBX[29], BMUX_DB[29], DB_scan[29]);
   _MUX mqB30 (DFTRAMBYP, READ_QBX[30], BMUX_DB[30], DB_scan[30]);
   _MUX mqB31 (DFTRAMBYP, READ_QBX[31], BMUX_DB[31], DB_scan[31]);
   _MUX mqB32 (DFTRAMBYP, READ_QBX[32], BMUX_DB[32], DB_scan[32]);
   _MUX mqB33 (DFTRAMBYP, READ_QBX[33], BMUX_DB[33], DB_scan[33]);
   _MUX mqB34 (DFTRAMBYP, READ_QBX[34], BMUX_DB[34], DB_scan[34]);
   _MUX mqB35 (DFTRAMBYP, READ_QBX[35], BMUX_DB[35], DB_scan[35]);
   _MUX mqB36 (DFTRAMBYP, READ_QBX[36], BMUX_DB[36], DB_scan[36]);
   _MUX mqB37 (DFTRAMBYP, READ_QBX[37], BMUX_DB[37], DB_scan[37]);
   _MUX mqB38 (DFTRAMBYP, READ_QBX[38], BMUX_DB[38], DB_scan[38]);
   _MUX mqB39 (DFTRAMBYP, READ_QBX[39], BMUX_DB[39], DB_scan[39]);
   _MUX mqB40 (DFTRAMBYP, READ_QBX[40], BMUX_DB[40], DB_scan[40]);
   _MUX mqB41 (DFTRAMBYP, READ_QBX[41], BMUX_DB[41], DB_scan[41]);
   _MUX mqB42 (DFTRAMBYP, READ_QBX[42], BMUX_DB[42], DB_scan[42]);
   _MUX mqB43 (DFTRAMBYP, READ_QBX[43], BMUX_DB[43], DB_scan[43]);
   _MUX mqB44 (DFTRAMBYP, READ_QBX[44], BMUX_DB[44], DB_scan[44]);
   _MUX mqB45 (DFTRAMBYP, READ_QBX[45], BMUX_DB[45], DB_scan[45]);
   _MUX mqB46 (DFTRAMBYP, READ_QBX[46], BMUX_DB[46], DB_scan[46]);
   _MUX mqB47 (DFTRAMBYP, READ_QBX[47], BMUX_DB[47], DB_scan[47]);
   _MUX mqB48 (DFTRAMBYP, READ_QBX[48], BMUX_DB[48], DB_scan[48]);
   _MUX mqB49 (DFTRAMBYP, READ_QBX[49], BMUX_DB[49], DB_scan[49]);
   _MUX mqB50 (DFTRAMBYP, READ_QBX[50], BMUX_DB[50], DB_scan[50]);
   _MUX mqB51 (DFTRAMBYP, READ_QBX[51], BMUX_DB[51], DB_scan[51]);
   _MUX mqB52 (DFTRAMBYP, READ_QBX[52], BMUX_DB[52], DB_scan[52]);
   _MUX mqB53 (DFTRAMBYP, READ_QBX[53], BMUX_DB[53], DB_scan[53]);
   _MUX mqB54 (DFTRAMBYP, READ_QBX[54], BMUX_DB[54], DB_scan[54]);
   _MUX mqB55 (DFTRAMBYP, READ_QBX[55], BMUX_DB[55], DB_scan[55]);
   _MUX mqB56 (DFTRAMBYP, READ_QBX[56], BMUX_DB[56], DB_scan[56]);
   _MUX mqB57 (DFTRAMBYP, READ_QBX[57], BMUX_DB[57], DB_scan[57]);
   _MUX mqB58 (DFTRAMBYP, READ_QBX[58], BMUX_DB[58], DB_scan[58]);
   _MUX mqB59 (DFTRAMBYP, READ_QBX[59], BMUX_DB[59], DB_scan[59]);
   _MUX mqB60 (DFTRAMBYP, READ_QBX[60], BMUX_DB[60], DB_scan[60]);
   _MUX mqB61 (DFTRAMBYP, READ_QBX[61], BMUX_DB[61], DB_scan[61]);
   _MUX mqB62 (DFTRAMBYP, READ_QBX[62], BMUX_DB[62], DB_scan[62]);
   _MUX mqB63 (DFTRAMBYP, READ_QBX[63], BMUX_DB[63], DB_scan[63]);
   SRAMdpw64d256_scanflop uDQB0 (.CLK(CLKB), .SE(SEB), .SI(BUS_SIB[0]), .D(DB_scan[0]), .Q(QB[0]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB1 (.CLK(CLKB), .SE(SEB), .SI(QB[0]), .D(DB_scan[1]), .Q(QB[1]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB2 (.CLK(CLKB), .SE(SEB), .SI(QB[1]), .D(DB_scan[2]), .Q(QB[2]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB3 (.CLK(CLKB), .SE(SEB), .SI(QB[2]), .D(DB_scan[3]), .Q(QB[3]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB4 (.CLK(CLKB), .SE(SEB), .SI(QB[3]), .D(DB_scan[4]), .Q(QB[4]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB5 (.CLK(CLKB), .SE(SEB), .SI(QB[4]), .D(DB_scan[5]), .Q(QB[5]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB6 (.CLK(CLKB), .SE(SEB), .SI(QB[5]), .D(DB_scan[6]), .Q(QB[6]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB7 (.CLK(CLKB), .SE(SEB), .SI(QB[6]), .D(DB_scan[7]), .Q(QB[7]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB8 (.CLK(CLKB), .SE(SEB), .SI(QB[7]), .D(DB_scan[8]), .Q(QB[8]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB9 (.CLK(CLKB), .SE(SEB), .SI(QB[8]), .D(DB_scan[9]), .Q(QB[9]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB10 (.CLK(CLKB), .SE(SEB), .SI(QB[9]), .D(DB_scan[10]), .Q(QB[10]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB11 (.CLK(CLKB), .SE(SEB), .SI(QB[10]), .D(DB_scan[11]), .Q(QB[11]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB12 (.CLK(CLKB), .SE(SEB), .SI(QB[11]), .D(DB_scan[12]), .Q(QB[12]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB13 (.CLK(CLKB), .SE(SEB), .SI(QB[12]), .D(DB_scan[13]), .Q(QB[13]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB14 (.CLK(CLKB), .SE(SEB), .SI(QB[13]), .D(DB_scan[14]), .Q(QB[14]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB15 (.CLK(CLKB), .SE(SEB), .SI(QB[14]), .D(DB_scan[15]), .Q(QB[15]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB16 (.CLK(CLKB), .SE(SEB), .SI(QB[15]), .D(DB_scan[16]), .Q(QB[16]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB17 (.CLK(CLKB), .SE(SEB), .SI(QB[16]), .D(DB_scan[17]), .Q(QB[17]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB18 (.CLK(CLKB), .SE(SEB), .SI(QB[17]), .D(DB_scan[18]), .Q(QB[18]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB19 (.CLK(CLKB), .SE(SEB), .SI(QB[18]), .D(DB_scan[19]), .Q(QB[19]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB20 (.CLK(CLKB), .SE(SEB), .SI(QB[19]), .D(DB_scan[20]), .Q(QB[20]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB21 (.CLK(CLKB), .SE(SEB), .SI(QB[20]), .D(DB_scan[21]), .Q(QB[21]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB22 (.CLK(CLKB), .SE(SEB), .SI(QB[21]), .D(DB_scan[22]), .Q(QB[22]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB23 (.CLK(CLKB), .SE(SEB), .SI(QB[22]), .D(DB_scan[23]), .Q(QB[23]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB24 (.CLK(CLKB), .SE(SEB), .SI(QB[23]), .D(DB_scan[24]), .Q(QB[24]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB25 (.CLK(CLKB), .SE(SEB), .SI(QB[24]), .D(DB_scan[25]), .Q(QB[25]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB26 (.CLK(CLKB), .SE(SEB), .SI(QB[25]), .D(DB_scan[26]), .Q(QB[26]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB27 (.CLK(CLKB), .SE(SEB), .SI(QB[26]), .D(DB_scan[27]), .Q(QB[27]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB28 (.CLK(CLKB), .SE(SEB), .SI(QB[27]), .D(DB_scan[28]), .Q(QB[28]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB29 (.CLK(CLKB), .SE(SEB), .SI(QB[28]), .D(DB_scan[29]), .Q(QB[29]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB30 (.CLK(CLKB), .SE(SEB), .SI(QB[29]), .D(DB_scan[30]), .Q(QB[30]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB31 (.CLK(CLKB), .SE(SEB), .SI(QB[30]), .D(DB_scan[31]), .Q(QB[31]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB32 (.CLK(CLKB), .SE(SEB), .SI(QB[33]), .D(DB_scan[32]), .Q(QB[32]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB33 (.CLK(CLKB), .SE(SEB), .SI(QB[34]), .D(DB_scan[33]), .Q(QB[33]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB34 (.CLK(CLKB), .SE(SEB), .SI(QB[35]), .D(DB_scan[34]), .Q(QB[34]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB35 (.CLK(CLKB), .SE(SEB), .SI(QB[36]), .D(DB_scan[35]), .Q(QB[35]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB36 (.CLK(CLKB), .SE(SEB), .SI(QB[37]), .D(DB_scan[36]), .Q(QB[36]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB37 (.CLK(CLKB), .SE(SEB), .SI(QB[38]), .D(DB_scan[37]), .Q(QB[37]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB38 (.CLK(CLKB), .SE(SEB), .SI(QB[39]), .D(DB_scan[38]), .Q(QB[38]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB39 (.CLK(CLKB), .SE(SEB), .SI(QB[40]), .D(DB_scan[39]), .Q(QB[39]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB40 (.CLK(CLKB), .SE(SEB), .SI(QB[41]), .D(DB_scan[40]), .Q(QB[40]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB41 (.CLK(CLKB), .SE(SEB), .SI(QB[42]), .D(DB_scan[41]), .Q(QB[41]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB42 (.CLK(CLKB), .SE(SEB), .SI(QB[43]), .D(DB_scan[42]), .Q(QB[42]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB43 (.CLK(CLKB), .SE(SEB), .SI(QB[44]), .D(DB_scan[43]), .Q(QB[43]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB44 (.CLK(CLKB), .SE(SEB), .SI(QB[45]), .D(DB_scan[44]), .Q(QB[44]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB45 (.CLK(CLKB), .SE(SEB), .SI(QB[46]), .D(DB_scan[45]), .Q(QB[45]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB46 (.CLK(CLKB), .SE(SEB), .SI(QB[47]), .D(DB_scan[46]), .Q(QB[46]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB47 (.CLK(CLKB), .SE(SEB), .SI(QB[48]), .D(DB_scan[47]), .Q(QB[47]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB48 (.CLK(CLKB), .SE(SEB), .SI(QB[49]), .D(DB_scan[48]), .Q(QB[48]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB49 (.CLK(CLKB), .SE(SEB), .SI(QB[50]), .D(DB_scan[49]), .Q(QB[49]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB50 (.CLK(CLKB), .SE(SEB), .SI(QB[51]), .D(DB_scan[50]), .Q(QB[50]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB51 (.CLK(CLKB), .SE(SEB), .SI(QB[52]), .D(DB_scan[51]), .Q(QB[51]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB52 (.CLK(CLKB), .SE(SEB), .SI(QB[53]), .D(DB_scan[52]), .Q(QB[52]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB53 (.CLK(CLKB), .SE(SEB), .SI(QB[54]), .D(DB_scan[53]), .Q(QB[53]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB54 (.CLK(CLKB), .SE(SEB), .SI(QB[55]), .D(DB_scan[54]), .Q(QB[54]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB55 (.CLK(CLKB), .SE(SEB), .SI(QB[56]), .D(DB_scan[55]), .Q(QB[55]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB56 (.CLK(CLKB), .SE(SEB), .SI(QB[57]), .D(DB_scan[56]), .Q(QB[56]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB57 (.CLK(CLKB), .SE(SEB), .SI(QB[58]), .D(DB_scan[57]), .Q(QB[57]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB58 (.CLK(CLKB), .SE(SEB), .SI(QB[59]), .D(DB_scan[58]), .Q(QB[58]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB59 (.CLK(CLKB), .SE(SEB), .SI(QB[60]), .D(DB_scan[59]), .Q(QB[59]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB60 (.CLK(CLKB), .SE(SEB), .SI(QB[61]), .D(DB_scan[60]), .Q(QB[60]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB61 (.CLK(CLKB), .SE(SEB), .SI(QB[62]), .D(DB_scan[61]), .Q(QB[61]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB62 (.CLK(CLKB), .SE(SEB), .SI(QB[63]), .D(DB_scan[62]), .Q(QB[62]), .Xout(XoutBiff));
   SRAMdpw64d256_scanflop uDQB63 (.CLK(CLKB), .SE(SEB), .SI(BUS_SIB[1]), .D(DB_scan[63]), .Q(QB[63]), .Xout(XoutBiff));
   assign SOB[0] = QB[31];
   assign SOB[1] = QB[32];
endmodule
`undef read_write
`undef write_write
`undef read_read
`disable_portfaults
`nosuppress_faults
